{"version":3,"sources":["utils/createScreen.js","utils/coordUtil.js","utils/createParallax.js","system/BgRenderSystem.js","GameOverScreen.js","GameScreen.js","createWorld.js","system/PlayerPositionSystem.js","system/ObstacleSpawnSystem.js","system/ObstacleCollideSystem.js","system/RewardRenderSystem.js","system/RewardCollideSystem.js","system/WaveRenderSystem.js","system/ObstacleRenderSystem.js","system/RewardSpawnSystem.js","system/PlayerRenderSystem.js","system/GoodLuckRenderSystem.js","StartScreen.js","index.js"],"names":["noop","createScreen","update","destroy","checkPointInsideRect","point","verts","DEVICE_PIXEL_RATIO","x","y","minX","maxX","minY","maxY","createParallax","tex","width","height","startX","startY","speedX","gapX","texWidth","texHeight","regionHeight","regionWidth","animateX","delta","draw","batch","offsetX","createBgRenderSystem","parallaxGroup","backGround","init","waterY","assets","atlas","psAtlas","bgSky","findRegion","bgWater","cl1","cl2","cl3","cl4","islandTex","lightHouseTex","waterYN","water","cloud1","cloud2","cloud3","cloud4","island","lightHouse","parallaxes","add","parallax","push","addAll","ps","p","createParallaxGroup","worldState","camera","setPosition","setProjection","combined","begin","setColor","end","createRenderGameOverScreen","Game","goToStartScreen","a","createRenderChoosingScreen","setCurrentScreen","gl","canvas","pixelRatio","createBatch","createOrthoCamera","inputHandler","InputHandler","goAtlas","bg","button","title","BG_HEIGHT","BG_WIDTH","BUTTON_WIDTH","BUTTON_HEIGHT","BUTTON_RECT","TITTLE_HEIGHT","TITTLE_WIDTH","addEventListener","gender","cleanup","createRenderPlayScreen","game","whiteTex","GAP","gameOver","stateTime","playerState","speedY","jumping","obstacles","rewards","gap","lastObstacleX","lastRewardX","wallStarts","obstacleInfos","widths","heights","speedXs","rewardInfos","playerInfo","fallingSpeed","jumpingSpeed","jumpingDecelerator","inWaterSpeedX","onAirSpeedX","world","extra","systems","passiveSystems","addSystem","system","passive","runPassive","createWorld","isTouched","generateObstacles","endX","Math","random","type","i","length","splice","obstacle","createObstacleSpawnSystem","pL","pR","pT","pB","oL","oR","oT","oB","rewardArray","reward1","reward2","reward3","texTure","reward","hit","rw","createRenderRewardSystem","rL","rR","rT","rB","waveAnimation","WAVE_WIDTH","WAVE_HEIGHT","waveAssets","waveAtlas","findRegions","createAnimation","console","log","getKeyFrame","PlayMode","LOOP","createWaveRenderSystem","rock1Tex","rock2Tex","seaStarTex","birdAnimation","octopusAnimation","crabAnimation","BIRD_WIDTH","OCTOPUS_WIDTH","CRAB_WIDTH","STAR_WIDTH","ROCK1_WIDTH","ROCK2_WIDTH","BIRD_HEIGHT","OCTOPUS_HEIGHT","CRAB_HEIGHT","STAR_HEIGHT","ROCK1_HEIGHT","ROCK2_HEIGHT","bird","octopus","crab","LOOP_PINGPONG","createObstacleRenderSystem","generateRewards","floor","popUpScreen","createRewardSpawnSystem","asset","playerAnimation","bubbleAnimation","charJump","PLAYER_WIDTH","PLAYER_HEIGHT","BUBBLE_WIDTH","BUBBLE_HEIGHT","PLAYER_JUMP_HEIGHT","bubble","createPlayerRenderSystem","goodLuck","maxWidth","maxHeight","scaleSpeed","popUpArray","oriScale","opacity","popUp","min","max","createGoodLuckRenderSystem","goToGameOverScreen","goToPlayScreen","csAtlas","choiceChar","TITLE_WIDTH","TITLE_HEIGHT","female_inactive","FI_HEIGHT","FI_WIDTH","female","F_HEIGHT","F_WIDTH","male_inactive","MI_HEIGHT","MI_WIDTH","male","M_HEIGHT","M_WIDTH","MALE_RECT","FEMALE_RECT","femaleActive","document","getElementById","window","devicePixelRatio","resizeCanvas","getContext","info","createWhiteTex","loadTexture","bgs","loadAtlas","choosingScreenAtlas","playScreenAtlas","screen","currentScreen","clearColor","clear","COLOR_BUFFER_BIT","loop","createGameLoop","setInterval","innerHTML","getFps"],"mappings":"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","file":"static/js/main.4645a998.chunk.js","sourcesContent":["const noop = () => {};\n\nconst createScreen = ({ update = noop, destroy = noop }) => {\n  return { update, destroy };\n};\n\nexport default createScreen;\n","export const checkPointInsideRect = (point, verts, DEVICE_PIXEL_RATIO = 1) => {\n  const x = point.x * DEVICE_PIXEL_RATIO;\n  const y = point.y * DEVICE_PIXEL_RATIO;\n  // const minX = Math.min(verts[0], verts[2], verts[4], verts[6]);\n  // const maxX = Math.max(verts[0], verts[2], verts[4], verts[6]);\n  // const minY = Math.min(verts[1], verts[3], verts[5], verts[7]);\n  // const maxY = Math.max(verts[1], verts[3], verts[5], verts[7]);\n\n  const minX = verts[0];\n  const maxX = verts[0] + verts[2];\n  const minY = verts[1];\n  const maxY = verts[1] + verts[3];\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\n  return true;\n};\n","import loadTexture from 'gdxjs/lib/loadTexture';\r\n\r\nconst createParallax = (\r\n  tex,\r\n  width,\r\n  height,\r\n  startX,\r\n  startY,\r\n  speedX,\r\n  gapX = 0\r\n) => {\r\n  const texWidth = tex.width;\r\n  const texHeight = tex.height;\r\n  const regionHeight = height;\r\n  const regionWidth = (regionHeight / texHeight) * texWidth;\r\n  let animateX = 0;\r\n\r\n  return {\r\n    update(delta) {\r\n      animateX -= speedX * delta;\r\n      while (animateX <= -(regionWidth + gapX)) {\r\n        animateX += regionWidth + gapX;\r\n      }\r\n    },\r\n    draw(batch) {\r\n      let offsetX = animateX;\r\n      while (offsetX < width) {\r\n        // batch.draw(tex, startX + offsetX, startY, regionWidth, regionHeight);\r\n        tex.draw(batch, startX + offsetX, startY, regionWidth, regionHeight);\r\n        offsetX += regionWidth + gapX;\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const loadParallax = async (\r\n  gl,\r\n  url,\r\n  width,\r\n  height,\r\n  startX,\r\n  startY,\r\n  speedX\r\n) => {\r\n  const tex = await loadTexture(gl, url);\r\n  return createParallax(tex, width, height, startX, startY, speedX);\r\n};\r\n\r\nexport const createParallaxGroup = () => {\r\n  const parallaxes = [];\r\n\r\n  return {\r\n    add: parallax => parallaxes.push(parallax),\r\n    addAll: (...ps) => {\r\n      for (let p of ps) {\r\n        parallaxes.push(p);\r\n      }\r\n    },\r\n    update(delta) {\r\n      for (let parallax of parallaxes) {\r\n        parallax.update(delta);\r\n      }\r\n    },\r\n    draw(batch) {\r\n      for (let parallax of parallaxes) {\r\n        parallax.draw(batch);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default createParallax;\r\n","import createParallax, { createParallaxGroup } from '../utils/createParallax';\r\n// import { fillRect } from 'gdxjs';\r\n\r\nexport const createBgRenderSystem = () => {\r\n  let parallaxGroup;\r\n  let backGround;\r\n  return {\r\n    init({ waterY }, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      const bgSky = atlas.findRegion('parallax_BG_sky', -1);\r\n      const bgWater = atlas.findRegion('parallax_BG_water', -1);\r\n      const cl1 = atlas.findRegion('parallax_BG_cloud1', -1);\r\n      const cl2 = atlas.findRegion('parallax_BG_cloud2', -1);\r\n      const cl3 = atlas.findRegion('parallax_BG_cloud3', -1);\r\n      const cl4 = atlas.findRegion('parallax_BG_cloud4', -1);\r\n      const islandTex = atlas.findRegion('parallax_BG_hondao', -1);\r\n      const lightHouseTex = atlas.findRegion('parallax_BG_ngon_hai_dang', -1);\r\n      backGround = bgSky;\r\n\r\n      let waterYN = waterY + height / 200 - height / 20;\r\n      // const bg = createParallax(bgSky, width, height, 0, 0, 0);\r\n      const water = createParallax(\r\n        bgWater,\r\n        width,\r\n        height,\r\n        -width / 10,\r\n        waterY - height / 20,\r\n        0\r\n      );\r\n      const cloud1 = createParallax(\r\n        cl1,\r\n        width,\r\n        height / 16,\r\n        0,\r\n        waterYN - height / 16,\r\n        width / 10,\r\n        width * 1.5\r\n      );\r\n      const cloud2 = createParallax(\r\n        cl2,\r\n        width,\r\n        height / 11,\r\n        0,\r\n        waterYN - height / 11,\r\n        width / 8,\r\n        width * 1.5\r\n      );\r\n      const cloud3 = createParallax(\r\n        cl3,\r\n        width,\r\n        height / 8,\r\n        0,\r\n        waterYN - height / 8,\r\n        width / 6,\r\n        width * 1.5\r\n      );\r\n      const cloud4 = createParallax(\r\n        cl4,\r\n        width,\r\n        height / 6,\r\n        0,\r\n        waterYN - height / 6,\r\n        width / 4,\r\n        width * 1.5\r\n      );\r\n      const island = createParallax(\r\n        islandTex,\r\n        width,\r\n        height / 30,\r\n        0,\r\n        waterYN - height / 30 + height / 200,\r\n        width / 4,\r\n        width\r\n      );\r\n      const lightHouse = createParallax(\r\n        lightHouseTex,\r\n        width,\r\n        height / 20,\r\n        width,\r\n        waterYN - height / 20,\r\n        width / 4,\r\n        width * 5\r\n      );\r\n      parallaxGroup = createParallaxGroup();\r\n      // parallaxGroup.add(bg);\r\n      parallaxGroup.add(water);\r\n      parallaxGroup.add(cloud1);\r\n      parallaxGroup.add(cloud2);\r\n      parallaxGroup.add(cloud3);\r\n      parallaxGroup.add(cloud4);\r\n      parallaxGroup.add(island);\r\n      parallaxGroup.add(lightHouse);\r\n    },\r\n    update(delta, worldState, { batch, width, height, camera, assets }) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      backGround.draw(batch, 0, 0, width, height);\r\n      parallaxGroup.update(delta);\r\n      parallaxGroup.draw(batch);\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import { createBatch, createOrthoCamera, InputHandler } from 'gdxjs';\r\nimport { createRenderChoosingScreen } from './StartScreen';\r\nimport { checkPointInsideRect } from './utils/coordUtil';\r\n\r\nexport const createRenderGameOverScreen = Game => {\r\n  const goToStartScreen = async () =>\r\n    Game.setCurrentScreen(await createRenderChoosingScreen(Game));\r\n\r\n  const { gl, width, height, canvas, assets, pixelRatio } = Game;\r\n\r\n  const batch = createBatch(gl);\r\n  const camera = createOrthoCamera(width, height, width, height);\r\n  const inputHandler = new InputHandler(canvas);\r\n\r\n  const atlas = assets.goAtlas;\r\n  const bg = atlas.findRegion('surfing_game_asset_screen_4_GAMEOVER', -1);\r\n  const button = atlas.findRegion('reload', -1);\r\n  const title = atlas.findRegion('GAMEOVER', -1);\r\n\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * bg.width) / bg.height;\r\n\r\n  const BUTTON_WIDTH = width / 3;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n  const BUTTON_RECT = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 2.9) / 4,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT\r\n  ];\r\n\r\n  const TITTLE_HEIGHT = height / 3;\r\n  const TITTLE_WIDTH = (TITTLE_HEIGHT * title.width) / title.height;\r\n\r\n  let point = {};\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    point = { x: x, y: y };\r\n    if (checkPointInsideRect(point, BUTTON_RECT, pixelRatio)) {\r\n      goToStartScreen();\r\n      Game.gender = 1;\r\n    }\r\n  });\r\n\r\n  const update = delta => {\r\n    camera.setPosition(0, 0);\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    bg.draw(\r\n      batch,\r\n      width / 2 - BG_WIDTH / 2,\r\n      height / 2 - BG_HEIGHT / 2,\r\n      BG_WIDTH,\r\n      BG_HEIGHT\r\n    );\r\n\r\n    button.draw(\r\n      batch,\r\n      width / 2 - BUTTON_WIDTH / 2,\r\n      (height * 2.9) / 4,\r\n      BUTTON_WIDTH,\r\n      BUTTON_HEIGHT\r\n    );\r\n\r\n    title.draw(\r\n      batch,\r\n      width / 2 - TITTLE_WIDTH / 2,\r\n      (height * 1.3) / 5,\r\n      TITTLE_WIDTH,\r\n      TITTLE_HEIGHT\r\n    );\r\n\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  };\r\n};\r\n","import { InputHandler } from 'gdxjs';\r\nimport createWorld from './createWorld';\r\nimport { createPlayerPositionSystem } from './system/PlayerPositionSystem';\r\nimport { createPlayerRenderSystem } from './system/PlayerRenderSystem';\r\n// import { createWaterLineRenderSystem } from './system/WaterLineRenderSystem';\r\nimport { createObstacleSpawnSystem } from './system/ObstacleSpawnSystem';\r\nimport { createObstacleRenderSystem } from './system/ObstacleRenderSystem';\r\nimport { createObstacleCollideSystem } from './system/ObstacleCollideSystem';\r\nimport { createRenderRewardSystem } from './system/RewardRenderSystem';\r\nimport { createRewardSpawnSystem } from './system/RewardSpawnSystem';\r\nimport { createRewardCollideSystem } from './system/RewardCollideSystem';\r\nimport { createBgRenderSystem } from './system/BgRenderSystem';\r\nimport { createWaveRenderSystem } from './system/WaveRenderSystem';\r\nimport { createRenderGameOverScreen } from './GameOverScreen';\r\nimport { createGoodLuckRenderSystem } from './system/GoodLuckRenderSystem';\r\n\r\nconst createRenderPlayScreen = game => {\r\n  const {\r\n    gender,\r\n    canvas,\r\n    pixelRatio,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    assets\r\n  } = game;\r\n\r\n  const inputHandler = new InputHandler(canvas);\r\n  const wallStarts = [];\r\n\r\n  const GAP = width / 6;\r\n  const PLAYER_INITIAL_Y = (2 * height) / 3;\r\n\r\n  const worldState = {\r\n    gameOver: false,\r\n    gender,\r\n    stateTime: 0,\r\n    playerState: {\r\n      x: GAP,\r\n      y: PLAYER_INITIAL_Y,\r\n      speedX: 0,\r\n      speedY: 0,\r\n      width: width / 8,\r\n      height: width / 7,\r\n      jumping: false,\r\n      stateTime: 0\r\n    },\r\n    waterY: height / 2.1 + height / 20,\r\n    obstacles: [],\r\n    rewards: [],\r\n    gap: GAP,\r\n    lastObstacleX: 2 * width,\r\n    lastRewardX: 2 * width,\r\n    wallStarts: wallStarts,\r\n    obstacleInfos: {\r\n      widths: [width / 9, width / 3, width / 3.5, width / 9],\r\n      heights: [height / 20, height / 4, height / 4, width / 9],\r\n      speedXs: [-width / 2, 0, 0, 0]\r\n    }, // size ve width / 4 , height / 4\r\n    rewardInfos: {\r\n      y: height / 4,\r\n      width: width / 9,\r\n      height: width / 9\r\n    },\r\n    playerInfo: {\r\n      fallingSpeed: height / 3,\r\n      jumpingSpeed: -height * 1.2,\r\n      jumpingDecelerator: height * 2,\r\n      inWaterSpeedX: width / 2,\r\n      onAirSpeedX: width\r\n    }\r\n  };\r\n  const extra = {\r\n    canvas,\r\n    pixelRatio,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    inputHandler,\r\n    assets\r\n  };\r\n  const world = createWorld(worldState, extra);\r\n  world.addSystem(createPlayerPositionSystem(), true);\r\n  world.addSystem(createObstacleSpawnSystem(), true);\r\n  world.addSystem(createObstacleCollideSystem(), true);\r\n  world.addSystem(createRenderRewardSystem(), true);\r\n  world.addSystem(createRewardCollideSystem(), true);\r\n\r\n  world.addSystem(createBgRenderSystem());\r\n  world.addSystem(createWaveRenderSystem());\r\n  // world.addSystem(createWaterLineRenderSystem());\r\n  world.addSystem(createObstacleRenderSystem());\r\n  world.addSystem(createRewardSpawnSystem());\r\n  world.addSystem(createPlayerRenderSystem());\r\n  world.addSystem(createGoodLuckRenderSystem());\r\n\r\n  const goToGameOverScreen = async () =>\r\n    game.setCurrentScreen(await createRenderGameOverScreen(game));\r\n\r\n  const update = delta => {\r\n    if (!worldState.gameOver) {\r\n      world.update(delta);\r\n    } else {\r\n      // world.update(delta, false);\r\n      goToGameOverScreen();\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  };\r\n};\r\n\r\nexport default createRenderPlayScreen;\r\n","export default (worldState, extra) => {\r\n  const systems = [];\r\n  const passiveSystems = [];\r\n  return {\r\n    addSystem(system, passive = false) {\r\n      system.init && system.init(worldState, extra);\r\n      if (passive) {\r\n        passiveSystems.push(system);\r\n      } else {\r\n        systems.push(system);\r\n      }\r\n    },\r\n    update(delta, runPassive = true) {\r\n      for (let system of systems) {\r\n        system.update(delta, worldState, extra);\r\n      }\r\n      if (runPassive) {\r\n        for (let system of passiveSystems) {\r\n          system.update(delta, worldState, extra);\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createPlayerPositionSystem = inputhandler => {\r\n  return {\r\n    update(delta, worldState, extra) {\r\n      const { inputHandler, height } = extra;\r\n      const {\r\n        playerState,\r\n        waterY,\r\n        playerInfo: {\r\n          fallingSpeed,\r\n          jumpingSpeed,\r\n          jumpingDecelerator,\r\n          inWaterSpeedX,\r\n          onAirSpeedX\r\n        }\r\n      } = worldState;\r\n\r\n      if (playerState.jumping) {\r\n        playerState.speedY += jumpingDecelerator * delta;\r\n        playerState.speedX = onAirSpeedX;\r\n        if (playerState.y + playerState.height > waterY * 1.1) {\r\n          playerState.jumping = false;\r\n        }\r\n      } else {\r\n        playerState.speedX = inWaterSpeedX;\r\n        if (inputHandler.isTouched()) {\r\n          playerState.speedY = -fallingSpeed;\r\n        } else {\r\n          playerState.speedY = fallingSpeed / 2;\r\n        }\r\n        if (playerState.y + playerState.height < waterY * 0.9) {\r\n          playerState.jumping = true;\r\n          playerState.speedY = jumpingSpeed;\r\n        }\r\n      }\r\n\r\n      playerState.x += playerState.speedX * delta;\r\n      playerState.y += playerState.speedY * delta;\r\n\r\n      if (playerState.y > height - playerState.height - height / 10) {\r\n        playerState.y = height - playerState.height - height / 10;\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createObstacleSpawnSystem = () => {\r\n  const generateObstacles = (\r\n    obstacles,\r\n    startX,\r\n    endX,\r\n    height,\r\n    obstacleInfos\r\n  ) => {\r\n    if (Math.random() > 0) {\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: Math.random() * (height / 3 - height / 8) + height / 8,\r\n        type: 0,\r\n        speedX: obstacleInfos.speedXs[0],\r\n        stateTime: 0\r\n      });\r\n    }\r\n    if (Math.random() > 0.5) {\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: height - obstacleInfos.heights[1],\r\n        type: 1,\r\n        speedX: obstacleInfos.speedXs[1],\r\n        stateTime: 0\r\n      });\r\n    } else {\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: height - obstacleInfos.heights[2],\r\n        type: 2,\r\n        speedX: obstacleInfos.speedXs[2],\r\n        stateTime: 0\r\n      });\r\n    }\r\n\r\n    if (Math.random() > 0.3) {\r\n      obstacles.push({\r\n        x: endX,\r\n        y: (height * 2.6) / 4,\r\n        speedX: obstacleInfos.speedXs[3],\r\n        type: 3\r\n      });\r\n    }\r\n  };\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      let {\r\n        playerState: { x },\r\n        obstacles,\r\n        gap,\r\n        lastObstacleX,\r\n        obstacleInfos\r\n      } = worldState;\r\n\r\n      while (lastObstacleX - x < width * 2) {\r\n        generateObstacles(\r\n          obstacles,\r\n          lastObstacleX + width * 2,\r\n          lastObstacleX + width * 4,\r\n          height,\r\n          obstacleInfos\r\n        );\r\n        lastObstacleX = worldState.lastObstacleX = lastObstacleX + width * 2;\r\n      }\r\n\r\n      for (let i = obstacles.length - 1; i >= 0; i--) {\r\n        let { type, x } = obstacles[i];\r\n        if (obstacles[i].x + worldState.obstacleInfos.widths[type] < x - gap) {\r\n          obstacles.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      for (let obstacle of obstacles) {\r\n        obstacle.x += obstacle.speedX * delta;\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createObstacleCollideSystem = () => {\r\n  return {\r\n    update(delta, worldState) {\r\n      const { playerState, obstacles, obstacleInfos } = worldState;\r\n      if (obstacles.length > 0) {\r\n        // console.log(obstacleInfos, obstacles);\r\n        const { widths, heights } = obstacleInfos;\r\n        const pL = playerState.x;\r\n        const pR = playerState.x + playerState.width;\r\n        const pT = playerState.y;\r\n        const pB = playerState.y + playerState.height;\r\n        for (let i = obstacles.length - 1; i >= 0; i--) {\r\n          const { y, type } = obstacles[i];\r\n          const oL = obstacles[i].x;\r\n          const oR = obstacles[i].x + widths[type];\r\n          const oT = y;\r\n          const oB = y + heights[type];\r\n          // console.log(pL, pR, pT, pB, oL, oR, oT, oB);\r\n          if (pL < oR && pR > oL && pT < oB && pB > oT) {\r\n            worldState.gameOver = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","// import { fillRect } from 'gdxjs';\r\n\r\nexport const createRenderRewardSystem = () => {\r\n  let rewardArray = [];\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      const reward1 = atlas.findRegion('hop_qua1', -1);\r\n      const reward2 = atlas.findRegion('hop_qua2', -1);\r\n      const reward3 = atlas.findRegion('hop_qua3', -1);\r\n      rewardArray = [\r\n        {\r\n          texTure: reward1,\r\n          width: width / 6,\r\n          height: ((width / 6) * reward1.height) / reward1.width\r\n        },\r\n        {\r\n          texTure: reward2,\r\n          width: width / 6,\r\n          height: ((width / 6) * reward2.height) / reward2.width\r\n        },\r\n        {\r\n          texTure: reward2,\r\n          width: width / 6,\r\n          height: ((width / 6) * reward3.height) / reward3.width\r\n        }\r\n      ];\r\n    },\r\n    update(\r\n      delta,\r\n      { rewards, playerState: { x }, gap },\r\n      { batch, width, height, camera, whiteTex }\r\n    ) {\r\n      camera.setPosition(x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      for (let reward of rewards) {\r\n        if (!reward.hit) {\r\n          const rw = rewardArray[reward.type];\r\n          // fillRect(\r\n          //   batch,\r\n          //   whiteTex,\r\n          //   reward.x,\r\n          //   reward.y,\r\n          //   reward.width,\r\n          //   reward.height\r\n          // );\r\n          rw.texTure.draw(\r\n            batch,\r\n            reward.x + reward.width / 2 - rw.width / 2,\r\n            reward.y + reward.height / 2 - rw.height / 2,\r\n            rw.width,\r\n            rw.height\r\n          );\r\n        }\r\n      }\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","export const createRewardCollideSystem = () => {\r\n  return {\r\n    update(delta, worldState) {\r\n      const { playerState, rewards, rewardInfos } = worldState;\r\n      if (rewards.length > 0) {\r\n        // console.log(obstacleInfos, obstacles);\r\n        const pL = playerState.x;\r\n        const pR = playerState.x + playerState.width;\r\n        const pT = playerState.y;\r\n        const pB = playerState.y + playerState.height;\r\n        for (let i = rewards.length - 1; i >= 0; i--) {\r\n          if (rewards[i].hit) {\r\n            continue;\r\n          }\r\n          const rL = rewards[i].x;\r\n          const rR = rewards[i].x + rewardInfos.width;\r\n          const rT = rewards[i].y;\r\n          const rB = rewards[i].y + rewardInfos.height;\r\n\r\n          if (pL < rR && pR > rL && pT < rB && pB > rT) {\r\n            rewards[i].hit = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","import { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\n\r\nexport const createWaveRenderSystem = () => {\r\n  let WAVE_WIDTH = 0;\r\n  let WAVE_HEIGHT = 0;\r\n  let stateTime = 0;\r\n  let waveAnimation;\r\n  return {\r\n    init({ waterY }, { width, height, assets }) {\r\n      const atlas = assets.waveAtlas;\r\n      const waveAssets = atlas.findRegions('final wave');\r\n      waveAnimation = createAnimation(0.1, waveAssets);\r\n      WAVE_WIDTH = width;\r\n      WAVE_HEIGHT = (waveAssets[0].height * WAVE_WIDTH) / waveAssets[0].width;\r\n      if (waterY + WAVE_HEIGHT < height) {\r\n        console.log('low');\r\n        WAVE_HEIGHT = height - waterY;\r\n      }\r\n    },\r\n    update(delta, { waterY }, { batch, width, height, camera }) {\r\n      stateTime += delta;\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      waveAnimation\r\n        .getKeyFrame(stateTime, PlayMode.LOOP)\r\n        .draw(batch, 0, waterY - height / 20, WAVE_WIDTH, WAVE_HEIGHT);\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\nexport const createObstacleRenderSystem = () => {\r\n  let rock1Tex;\r\n  let rock2Tex;\r\n  let seaStarTex;\r\n  let birdAnimation;\r\n  let octopusAnimation;\r\n  let crabAnimation;\r\n  let BIRD_WIDTH,\r\n    OCTOPUS_WIDTH,\r\n    CRAB_WIDTH,\r\n    STAR_WIDTH,\r\n    ROCK1_WIDTH,\r\n    ROCK2_WIDTH;\r\n  let BIRD_HEIGHT,\r\n    OCTOPUS_HEIGHT,\r\n    CRAB_HEIGHT,\r\n    STAR_HEIGHT,\r\n    ROCK1_HEIGHT,\r\n    ROCK2_HEIGHT;\r\n\r\n  return {\r\n    init({ obstacleInfos }, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      rock1Tex = atlas.findRegion('cuc_da', 1);\r\n      rock2Tex = atlas.findRegion('cuc_da', 2);\r\n      seaStarTex = atlas.findRegion('sao_bien', -1);\r\n      const bird = atlas.findRegions('chim');\r\n      const octopus = atlas.findRegions('bachtuoc');\r\n      const crab = atlas.findRegions('cua');\r\n      birdAnimation = createAnimation(0.15, bird);\r\n      octopusAnimation = createAnimation(0.15, octopus);\r\n      crabAnimation = createAnimation(0.15, crab);\r\n\r\n      BIRD_WIDTH = width / 5;\r\n      BIRD_HEIGHT = (bird[0].height * BIRD_WIDTH) / bird[0].width;\r\n      ROCK1_HEIGHT = height / 3;\r\n      ROCK1_WIDTH = (ROCK1_HEIGHT * rock1Tex.width) / rock1Tex.height;\r\n      ROCK2_HEIGHT = height / 3;\r\n      ROCK2_WIDTH = (ROCK2_HEIGHT * rock2Tex.width) / rock2Tex.height;\r\n      OCTOPUS_HEIGHT = height / 6;\r\n      OCTOPUS_WIDTH = (octopus[0].width * OCTOPUS_HEIGHT) / octopus[0].height;\r\n      CRAB_HEIGHT = height / 11;\r\n      CRAB_WIDTH = (crab[0].width * CRAB_HEIGHT) / crab[0].height;\r\n      STAR_HEIGHT = height / 12;\r\n      STAR_WIDTH = (STAR_HEIGHT * seaStarTex.width) / seaStarTex.height;\r\n    },\r\n    update(\r\n      delta,\r\n      {\r\n        obstacles,\r\n        playerState: { x },\r\n        gap,\r\n        obstacleInfos: { widths, heights }\r\n      },\r\n      { batch, camera, whiteTex, assets, width, height }\r\n    ) {\r\n      camera.setPosition(x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      for (let obstacle of obstacles) {\r\n        const { type, x, y } = obstacle;\r\n        // fillRect(batch, whiteTex, x, y, widths[type], heights[type]);\r\n        if (type === 0) {\r\n          obstacle.stateTime += delta;\r\n          birdAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x + widths[type] / 2 - BIRD_WIDTH / 2,\r\n              y + heights[type] / 2 - BIRD_HEIGHT / 2,\r\n              BIRD_WIDTH,\r\n              BIRD_HEIGHT\r\n            );\r\n        }\r\n        if (type === 1) {\r\n          obstacle.stateTime += delta;\r\n          rock1Tex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - ROCK1_WIDTH / 2 - width / 16,\r\n            y + heights[type] - ROCK1_HEIGHT + height / 80,\r\n            ROCK1_WIDTH,\r\n            ROCK1_HEIGHT\r\n          );\r\n          crabAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x - CRAB_WIDTH / 2 + width / 20,\r\n              y - CRAB_HEIGHT / 2 + height / 20,\r\n              CRAB_WIDTH,\r\n              CRAB_HEIGHT\r\n            );\r\n          seaStarTex.draw(\r\n            batch,\r\n            x + ROCK1_WIDTH / 5,\r\n            y + ROCK1_HEIGHT / 2.7,\r\n            STAR_WIDTH,\r\n            STAR_HEIGHT\r\n          );\r\n        }\r\n        if (type === 2) {\r\n          obstacle.stateTime += delta;\r\n          rock2Tex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - ROCK2_WIDTH / 2 + width / 16,\r\n            y + heights[type] - ROCK2_HEIGHT + height / 60,\r\n            ROCK2_WIDTH,\r\n            ROCK2_HEIGHT\r\n          );\r\n          octopusAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x - OCTOPUS_WIDTH / 2 + width / 20,\r\n              y - OCTOPUS_WIDTH / 2,\r\n              OCTOPUS_WIDTH,\r\n              OCTOPUS_HEIGHT\r\n            );\r\n        }\r\n        if (type === 3) {\r\n          seaStarTex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - STAR_WIDTH / 2,\r\n            y + heights[type] / 2 - STAR_HEIGHT / 2,\r\n            STAR_WIDTH,\r\n            STAR_HEIGHT\r\n          );\r\n        }\r\n      }\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","export const createRewardSpawnSystem = () => {\r\n  const generateRewards = (\r\n    rewards,\r\n    startX,\r\n    endX,\r\n    height,\r\n    width,\r\n    rewardInfos\r\n  ) => {\r\n    if (Math.random() > 0.6) {\r\n      rewards.push({\r\n        x: endX,\r\n        y: height / 4,\r\n        width: rewardInfos.width,\r\n        height: rewardInfos.width,\r\n        hit: false,\r\n        type: Math.floor(Math.random() * 3),\r\n        popUpScreen: false\r\n      });\r\n    } else {\r\n      if (Math.random() > 0.9) {\r\n        rewards.push({\r\n          x: endX,\r\n          y: (height * 6.6) / 8,\r\n          width: rewardInfos.width,\r\n          height: rewardInfos.width,\r\n          hit: false,\r\n          type: Math.floor(Math.random() * 3),\r\n          popUpScreen: false\r\n        });\r\n      }\r\n    }\r\n  };\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      let {\r\n        playerState: { x },\r\n        rewards,\r\n        // gap,\r\n        lastRewardX,\r\n        rewardInfos\r\n      } = worldState;\r\n\r\n      while (lastRewardX - x < width * 2) {\r\n        generateRewards(\r\n          rewards,\r\n          lastRewardX + width * 2,\r\n          lastRewardX + width * 4,\r\n          height,\r\n          width,\r\n          rewardInfos\r\n        );\r\n        lastRewardX = worldState.lastRewardX = lastRewardX + width * 2;\r\n      }\r\n      // for (let i = rewards.length - 1; i >= 0; i--) {\r\n      //   if (rewards[i].x + worldState.obstacleInfos.width < x - gap) {\r\n      //     rewards.splice(i, 1);\r\n      //   }\r\n      // }\r\n    }\r\n  };\r\n};\r\n","// import { fillRect } from 'gdxjs';\r\nimport { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\n// import {}\r\n\r\nexport const createPlayerRenderSystem = () => {\r\n  let PLAYER_WIDTH = 0;\r\n  let PLAYER_HEIGHT = 0;\r\n  let BUBBLE_WIDTH = 0;\r\n  let BUBBLE_HEIGHT = 0;\r\n  let PLAYER_JUMP_HEIGHT = 0;\r\n  let asset;\r\n  let atlas;\r\n  let playerAnimation;\r\n  let bubbleAnimation;\r\n  let charJump;\r\n  return {\r\n    init({ gender, playerState }, { assets, width, height }) {\r\n      atlas = assets.psAtlas;\r\n      if (gender === 0) {\r\n        asset = atlas.findRegions('male');\r\n        charJump = atlas.findRegion('male_jump', -1);\r\n      } else {\r\n        asset = atlas.findRegions('female');\r\n        charJump = atlas.findRegion('female_jump', -1);\r\n      }\r\n      const bubble = atlas.findRegions('bubble');\r\n\r\n      bubbleAnimation = createAnimation(0.2, bubble);\r\n      playerAnimation = createAnimation(0.3, asset);\r\n      PLAYER_WIDTH = width / 3.2;\r\n      PLAYER_HEIGHT = (asset[0].height * PLAYER_WIDTH) / asset[0].width;\r\n      PLAYER_JUMP_HEIGHT = (charJump.height * PLAYER_WIDTH) / charJump.width;\r\n\r\n      BUBBLE_WIDTH = width / 6;\r\n      BUBBLE_HEIGHT = (bubble[0].height * BUBBLE_WIDTH) / bubble[0].width;\r\n    },\r\n    update(delta, { playerState, gap }, { batch, camera, whiteTex, width }) {\r\n      camera.setPosition(playerState.x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      // fillRect(\r\n      //   batch,\r\n      //   whiteTex,\r\n      //   playerState.x,\r\n      //   playerState.y,\r\n      //   playerState.width,\r\n      //   playerState.height\r\n      // );\r\n      playerState.stateTime += delta;\r\n      if (playerState.jumping) {\r\n        charJump.draw(\r\n          batch,\r\n          playerState.x + playerState.width / 2 - PLAYER_WIDTH / 2,\r\n          playerState.y + playerState.height / 2 - PLAYER_JUMP_HEIGHT / 2,\r\n          PLAYER_WIDTH,\r\n          PLAYER_JUMP_HEIGHT\r\n        );\r\n      } else {\r\n        playerAnimation\r\n          .getKeyFrame(playerState.stateTime, PlayMode.LOOP_PINGPONG)\r\n          .draw(\r\n            batch,\r\n            playerState.x + playerState.width / 2 - PLAYER_WIDTH / 2,\r\n            playerState.y + playerState.height / 2 - PLAYER_HEIGHT / 2,\r\n            PLAYER_WIDTH,\r\n            PLAYER_HEIGHT\r\n          );\r\n      }\r\n      bubbleAnimation\r\n        .getKeyFrame(playerState.stateTime, PlayMode.LOOP_PINGPONG)\r\n        .draw(\r\n          batch,\r\n          playerState.x - PLAYER_WIDTH / 2,\r\n          playerState.y + playerState.height,\r\n          BUBBLE_WIDTH,\r\n          BUBBLE_HEIGHT,\r\n          BUBBLE_WIDTH / 2,\r\n          BUBBLE_HEIGHT / 2,\r\n          0,\r\n          1,\r\n          1\r\n        );\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","export const createGoodLuckRenderSystem = () => {\r\n  let goodLuck;\r\n  let maxWidth;\r\n  let maxHeight;\r\n  let scaleSpeed = 0;\r\n  let oriScale = 0.1;\r\n  let popUpArray = [];\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      goodLuck = atlas.findRegion('popup_chuc_may_man', -1);\r\n      maxWidth = width / 1.3;\r\n      maxHeight = (maxWidth * goodLuck.height) / goodLuck.width;\r\n\r\n      scaleSpeed = width / 200;\r\n    },\r\n    update(delta, { rewards }, { camera, batch, width, height }) {\r\n      if (rewards.length > 0) {\r\n        for (let reward of rewards) {\r\n          if (reward.hit && !reward.popUpScreen) {\r\n            reward.popUpScreen = true;\r\n            popUpArray.push({\r\n              oriScale: oriScale,\r\n              scaleSpeed: scaleSpeed,\r\n              opacity: 1\r\n            });\r\n          }\r\n        }\r\n      }\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      if (popUpArray.length > 0) {\r\n        for (let i = 0; i < popUpArray.length; i++) {\r\n          let popUp = popUpArray[i];\r\n          popUp.oriScale += popUp.scaleSpeed * delta;\r\n          popUp.oriScale = Math.min(1, popUp.oriScale);\r\n\r\n          if (popUp.oriScale === 1) {\r\n            popUp.opacity -= (delta * width) / 100;\r\n            popUp.opacity = Math.max(0, popUp.opacity);\r\n          }\r\n\r\n          batch.setColor(1, 1, 1, popUp.opacity);\r\n          goodLuck.draw(\r\n            batch,\r\n            width / 2 - maxWidth / 2,\r\n            (height * 0.32) / 2 - maxHeight / 2,\r\n            maxWidth,\r\n            maxHeight,\r\n            maxWidth / 2,\r\n            maxHeight / 2,\r\n            0,\r\n            popUp.oriScale,\r\n            popUp.oriScale\r\n          );\r\n          if (popUp.opacity === 0) {\r\n            popUpArray.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import createScreen from './utils/createScreen';\r\nimport { InputHandler, createBatch, createOrthoCamera } from 'gdxjs';\r\nimport { checkPointInsideRect } from './utils/coordUtil';\r\n// import createWhiteTexture from 'gl-white-texture';\r\nimport createRenderPlayScreen from './GameScreen';\r\n\r\nexport const createRenderChoosingScreen = Game => {\r\n  const goToPlayScreen = async () =>\r\n    Game.setCurrentScreen(await createRenderPlayScreen(Game));\r\n\r\n  const { gl, width, height, assets, canvas, pixelRatio } = Game;\r\n\r\n  const batch = createBatch(gl);\r\n  const camera = createOrthoCamera(width, height, width, height);\r\n  const inputHandler = new InputHandler(canvas);\r\n  // const whiteTex = createWhiteTexture(gl);\r\n  const atlas = assets.csAtlas;\r\n\r\n  const bg = atlas.findRegion('bg', -1);\r\n  // const BG_WIDTH = width;\r\n  // const BG_HEIGHT = (BG_WIDTH * bg.height) / bg.width;\r\n\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * bg.width) / bg.height;\r\n  console.log(bg.width / bg.height, BG_WIDTH / BG_HEIGHT);\r\n\r\n  const button = atlas.findRegion('btn_play', -1);\r\n  const BUTTON_WIDTH = width / 4;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n\r\n  const choiceChar = atlas.findRegion('select_character', -1);\r\n  const TITLE_WIDTH = (width * 2.81) / 4;\r\n  const TITLE_HEIGHT = (TITLE_WIDTH * choiceChar.height) / choiceChar.width;\r\n\r\n  const female_inactive = atlas.findRegion('fmale__inactive', -1);\r\n  const FI_HEIGHT = height / 3.6;\r\n  const FI_WIDTH = (FI_HEIGHT * female_inactive.width) / female_inactive.height;\r\n\r\n  const female = atlas.findRegion('fmale', -1);\r\n  const F_HEIGHT = height / 2.8;\r\n  const F_WIDTH = (F_HEIGHT * female.width) / female.height;\r\n\r\n  const male_inactive = atlas.findRegion('male_inactive', -1);\r\n  const MI_HEIGHT = height / 3.6;\r\n  const MI_WIDTH = (MI_HEIGHT * male_inactive.width) / male_inactive.height;\r\n\r\n  const male = atlas.findRegion('male', -1);\r\n  const M_HEIGHT = height / 2.8;\r\n  const M_WIDTH = (M_HEIGHT * male.width) / male.height;\r\n\r\n  const MALE_RECT = [\r\n    width / 1.9 + width / 20,\r\n    (height * 4.8) / 6 - MI_HEIGHT,\r\n    MI_WIDTH,\r\n    MI_HEIGHT\r\n  ];\r\n\r\n  const FEMALE_RECT = [\r\n    width / 1.9 - FI_WIDTH - width / 20,\r\n    (height * 4.8) / 6 - MI_HEIGHT,\r\n    FI_WIDTH,\r\n    FI_HEIGHT\r\n  ];\r\n\r\n  const BUTTON_RECT = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 6.2) / 7,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT\r\n  ];\r\n\r\n  let femaleActive = true;\r\n  let point;\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    point = { x: x, y: y };\r\n    if (checkPointInsideRect(point, MALE_RECT, pixelRatio)) {\r\n      femaleActive = false;\r\n      Game.gender = 0;\r\n    }\r\n    if (checkPointInsideRect(point, FEMALE_RECT, pixelRatio)) {\r\n      femaleActive = true;\r\n      Game.gender = 1;\r\n    }\r\n  });\r\n\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    if (checkPointInsideRect(point, BUTTON_RECT, pixelRatio)) {\r\n      goToPlayScreen();\r\n    }\r\n  });\r\n\r\n  return createScreen({\r\n    update(delta) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      // background\r\n      bg.draw(\r\n        batch,\r\n        width / 2 - BG_WIDTH / 2,\r\n        height / 2 - BG_HEIGHT / 2,\r\n        BG_WIDTH,\r\n        BG_HEIGHT\r\n      );\r\n      // play button\r\n      button.draw(\r\n        batch,\r\n        width / 2 - BUTTON_WIDTH / 2,\r\n        (height * 6.2) / 7,\r\n        BUTTON_WIDTH,\r\n        BUTTON_HEIGHT\r\n      );\r\n      // choice char\r\n      choiceChar.draw(\r\n        batch,\r\n        width / 2 - TITLE_WIDTH / 2,\r\n        (height * 5.75) / 7,\r\n        TITLE_WIDTH,\r\n        TITLE_HEIGHT\r\n      );\r\n      // draw char\r\n      if (femaleActive) {\r\n        female.draw(\r\n          batch,\r\n          width / 1.9 - F_WIDTH,\r\n          (height * 4.8) / 6 - F_HEIGHT,\r\n          F_WIDTH,\r\n          F_HEIGHT\r\n        );\r\n        male_inactive.draw(\r\n          batch,\r\n          width / 1.9 + width / 20,\r\n          (height * 4.8) / 6 - MI_HEIGHT,\r\n          MI_WIDTH,\r\n          MI_HEIGHT\r\n        );\r\n      } else {\r\n        male.draw(\r\n          batch,\r\n          width / 1.9,\r\n          (height * 4.8) / 6 - M_HEIGHT,\r\n          M_WIDTH,\r\n          M_HEIGHT\r\n        );\r\n        female_inactive.draw(\r\n          batch,\r\n          width / 1.9 - FI_WIDTH - width / 20,\r\n          (height * 4.8) / 6 - MI_HEIGHT,\r\n          FI_WIDTH,\r\n          FI_HEIGHT\r\n        );\r\n      }\r\n      batch.end();\r\n    },\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  });\r\n};\r\n","import './index.css';\nimport {\n  resizeCanvas,\n  createGameLoop,\n  createBatch,\n  createOrthoCamera,\n  loadTexture,\n  loadAtlas\n} from 'gdxjs';\nimport createWhiteTex from 'gl-white-texture';\nimport { createRenderChoosingScreen } from './StartScreen';\n\nconst init = async () => {\n  const canvas = document.getElementById('main');\n  const pixelRatio = window.devicePixelRatio || 1;\n  const [width, height] = resizeCanvas(canvas, pixelRatio);\n  const gl = canvas.getContext('webgl');\n  const info = document.getElementById('info');\n\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n  const whiteTex = createWhiteTex(gl);\n\n  const bgs = await loadTexture(gl, 'sea.jpg');\n  const choosingScreenAtlas = await loadAtlas(gl, './assets/surf.atlas');\n  const playScreenAtlas = await loadAtlas(gl, './assets/asset_wave.atlas');\n  const waveAtlas = await loadAtlas(gl, './assets/wave.atlas');\n  const gameOver = await loadAtlas(gl, './assets/end_surfing.atlas');\n  let assets = {\n    bg: bgs,\n    csAtlas: choosingScreenAtlas,\n    psAtlas: playScreenAtlas,\n    waveAtlas: waveAtlas,\n    goAtlas: gameOver\n  };\n\n  const Game = {\n    gender: 1,\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    pixelRatio: pixelRatio,\n    assets,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    }\n  };\n\n  Game.setCurrentScreen(await createRenderChoosingScreen(Game));\n\n  gl.clearColor(1, 0.388, 0.012, 1);\n  // gl.clearColor(0, 0, 0, 1);\n  // gl.clearColor(1, 0, 0, 1);\n  const update = delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  const loop = createGameLoop(update);\n  setInterval(() => (info.innerHTML = `FPS: ${loop.getFps()}`), 500);\n};\n\ninit();\n"],"sourceRoot":""}