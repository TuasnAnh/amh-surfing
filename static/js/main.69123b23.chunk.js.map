{"version":3,"sources":["utils/createScreen.js","utils/coordUtil.js","utils/createParallax.js","system/BgRenderSystem.js","GameOverScreen.js","GameScreen.js","createWorld.js","system/PlayerPositionSystem.js","system/ObstacleSpawnSystem.js","system/ObstacleCollideSystem.js","system/RewardRenderSystem.js","system/RewardCollideSystem.js","system/WaveRenderSystem.js","system/ObstacleRenderSystem.js","system/RewardSpawnSystem.js","system/PlayerRenderSystem.js","StartScreen.js","index.js"],"names":["noop","createScreen","update","destroy","checkPointInsideRect","point","verts","DEVICE_PIXEL_RATIO","x","y","minX","maxX","minY","maxY","createParallax","tex","width","height","startX","startY","speedX","gapX","texWidth","texHeight","regionHeight","regionWidth","animateX","delta","draw","batch","offsetX","createBgRenderSystem","parallaxGroup","backGround","init","waterY","assets","atlas","psAtlas","bgSky","findRegion","bgWater","cl1","cl2","cl3","cl4","islandTex","lightHouseTex","waterYN","water","cloud1","cloud2","cloud3","cloud4","island","lightHouse","parallaxes","add","parallax","push","addAll","ps","p","createParallaxGroup","worldState","camera","setPosition","setProjection","combined","begin","setColor","end","createRenderGameOverScreen","Game","goToStartScreen","a","createRenderChoosingScreen","setCurrentScreen","gl","canvas","whiteTex","createBatch","createOrthoCamera","inputHandler","InputHandler","addEventListener","gender","fillRect","cleanup","createRenderPlayScreen","game","pixelRatio","GAP","gameOver","stateTime","playerState","speedY","jumping","obstacles","rewards","gap","lastObstacleX","lastRewardX","wallStarts","obstacleInfos","widths","heights","speedXs","rewardInfos","playerInfo","fallingSpeed","jumpingSpeed","jumpingDecelerator","inWaterSpeedX","onAirSpeedX","world","extra","systems","passiveSystems","addSystem","system","passive","runPassive","createWorld","isTouched","generateObstacles","endX","Math","random","type","i","length","splice","obstacle","createObstacleSpawnSystem","pL","pR","pT","pB","oL","oR","oT","oB","rewardArray","reward1","reward2","reward3","texTure","reward","hit","rw","createRenderRewardSystem","rL","rR","rT","rB","waveAnimation","WAVE_WIDTH","WAVE_HEIGHT","waveAssets","waveAtlas","findRegions","createAnimation","console","log","getKeyFrame","PlayMode","LOOP","createWaveRenderSystem","rock1Tex","rock2Tex","seaStarTex","birdAnimation","octopusAnimation","crabAnimation","BIRD_WIDTH","OCTOPUS_WIDTH","CRAB_WIDTH","STAR_WIDTH","ROCK1_WIDTH","ROCK2_WIDTH","BIRD_HEIGHT","OCTOPUS_HEIGHT","CRAB_HEIGHT","STAR_HEIGHT","ROCK1_HEIGHT","ROCK2_HEIGHT","bird","octopus","crab","LOOP_PINGPONG","createObstacleRenderSystem","generateRewards","floor","createRewardSpawnSystem","asset","playerAnimation","bubbleAnimation","charJump","PLAYER_WIDTH","PLAYER_HEIGHT","BUBBLE_WIDTH","BUBBLE_HEIGHT","PLAYER_JUMP_HEIGHT","bubble","createPlayerRenderSystem","goToGameOverScreen","goToPlayScreen","csAtlas","bg","BG_HEIGHT","BG_WIDTH","button","BUTTON_WIDTH","BUTTON_HEIGHT","choiceChar","TITLE_WIDTH","TITLE_HEIGHT","female_inactive","FI_HEIGHT","FI_WIDTH","female","F_HEIGHT","F_WIDTH","male_inactive","MI_HEIGHT","MI_WIDTH","male","M_HEIGHT","M_WIDTH","MALE_RECT","FEMALE_RECT","BUTTON_RECT","femaleActive","document","getElementById","window","devicePixelRatio","resizeCanvas","getContext","info","createWhiteTex","loadTexture","bgs","loadAtlas","choosingScreenAtlas","playScreenAtlas","screen","currentScreen","clearColor","clear","COLOR_BUFFER_BIT","loop","createGameLoop","setInterval","innerHTML","getFps"],"mappings":"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","file":"static/js/main.69123b23.chunk.js","sourcesContent":["const noop = () => {};\n\nconst createScreen = ({ update = noop, destroy = noop }) => {\n  return { update, destroy };\n};\n\nexport default createScreen;\n","export const checkPointInsideRect = (point, verts, DEVICE_PIXEL_RATIO = 1) => {\n  const x = point.x * DEVICE_PIXEL_RATIO;\n  const y = point.y * DEVICE_PIXEL_RATIO;\n  // const minX = Math.min(verts[0], verts[2], verts[4], verts[6]);\n  // const maxX = Math.max(verts[0], verts[2], verts[4], verts[6]);\n  // const minY = Math.min(verts[1], verts[3], verts[5], verts[7]);\n  // const maxY = Math.max(verts[1], verts[3], verts[5], verts[7]);\n\n  const minX = verts[0];\n  const maxX = verts[0] + verts[2];\n  const minY = verts[1];\n  const maxY = verts[1] + verts[3];\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\n  return true;\n};\n","import loadTexture from 'gdxjs/lib/loadTexture';\r\n\r\nconst createParallax = (\r\n  tex,\r\n  width,\r\n  height,\r\n  startX,\r\n  startY,\r\n  speedX,\r\n  gapX = 0\r\n) => {\r\n  const texWidth = tex.width;\r\n  const texHeight = tex.height;\r\n  const regionHeight = height;\r\n  const regionWidth = (regionHeight / texHeight) * texWidth;\r\n  let animateX = 0;\r\n\r\n  return {\r\n    update(delta) {\r\n      animateX -= speedX * delta;\r\n      while (animateX <= -(regionWidth + gapX)) {\r\n        animateX += regionWidth + gapX;\r\n      }\r\n    },\r\n    draw(batch) {\r\n      let offsetX = animateX;\r\n      while (offsetX < width) {\r\n        // batch.draw(tex, startX + offsetX, startY, regionWidth, regionHeight);\r\n        tex.draw(batch, startX + offsetX, startY, regionWidth, regionHeight);\r\n        offsetX += regionWidth + gapX;\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const loadParallax = async (\r\n  gl,\r\n  url,\r\n  width,\r\n  height,\r\n  startX,\r\n  startY,\r\n  speedX\r\n) => {\r\n  const tex = await loadTexture(gl, url);\r\n  return createParallax(tex, width, height, startX, startY, speedX);\r\n};\r\n\r\nexport const createParallaxGroup = () => {\r\n  const parallaxes = [];\r\n\r\n  return {\r\n    add: parallax => parallaxes.push(parallax),\r\n    addAll: (...ps) => {\r\n      for (let p of ps) {\r\n        parallaxes.push(p);\r\n      }\r\n    },\r\n    update(delta) {\r\n      for (let parallax of parallaxes) {\r\n        parallax.update(delta);\r\n      }\r\n    },\r\n    draw(batch) {\r\n      for (let parallax of parallaxes) {\r\n        parallax.draw(batch);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default createParallax;\r\n","import createParallax, { createParallaxGroup } from '../utils/createParallax';\r\nimport { fillRect } from 'gdxjs';\r\n\r\nexport const createBgRenderSystem = () => {\r\n  let parallaxGroup;\r\n  let backGround;\r\n  return {\r\n    init({ waterY }, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      const bgSky = atlas.findRegion('parallax_BG_sky', -1);\r\n      const bgWater = atlas.findRegion('parallax_BG_water', -1);\r\n      const cl1 = atlas.findRegion('parallax_BG_cloud1', -1);\r\n      const cl2 = atlas.findRegion('parallax_BG_cloud2', -1);\r\n      const cl3 = atlas.findRegion('parallax_BG_cloud3', -1);\r\n      const cl4 = atlas.findRegion('parallax_BG_cloud4', -1);\r\n      const islandTex = atlas.findRegion('parallax_BG_hondao', -1);\r\n      const lightHouseTex = atlas.findRegion('parallax_BG_ngon_hai_dang', -1);\r\n      backGround = bgSky;\r\n\r\n      let waterYN = waterY + height / 200 - height / 20;\r\n      // const bg = createParallax(bgSky, width, height, 0, 0, 0);\r\n      const water = createParallax(\r\n        bgWater,\r\n        width,\r\n        height,\r\n        -width / 10,\r\n        waterY - height / 20,\r\n        0\r\n      );\r\n      const cloud1 = createParallax(\r\n        cl1,\r\n        width,\r\n        height / 16,\r\n        0,\r\n        waterYN - height / 16,\r\n        width / 10,\r\n        width * 3\r\n      );\r\n      const cloud2 = createParallax(\r\n        cl2,\r\n        width,\r\n        height / 11,\r\n        0,\r\n        waterYN - height / 11,\r\n        width / 8,\r\n        width * 3\r\n      );\r\n      const cloud3 = createParallax(\r\n        cl3,\r\n        width,\r\n        height / 8,\r\n        0,\r\n        waterYN - height / 8,\r\n        width / 6,\r\n        width * 3\r\n      );\r\n      const cloud4 = createParallax(\r\n        cl4,\r\n        width,\r\n        height / 6,\r\n        0,\r\n        waterYN - height / 6,\r\n        width / 4,\r\n        width * 3\r\n      );\r\n      const island = createParallax(\r\n        islandTex,\r\n        width,\r\n        height / 30,\r\n        0,\r\n        waterYN - height / 30 + height / 200,\r\n        width / 4,\r\n        width * 2\r\n      );\r\n      const lightHouse = createParallax(\r\n        lightHouseTex,\r\n        width,\r\n        height / 20,\r\n        width,\r\n        waterYN - height / 20,\r\n        width / 4,\r\n        width * 5\r\n      );\r\n      parallaxGroup = createParallaxGroup();\r\n      // parallaxGroup.add(bg);\r\n      parallaxGroup.add(water);\r\n      parallaxGroup.add(cloud1);\r\n      parallaxGroup.add(cloud2);\r\n      parallaxGroup.add(cloud3);\r\n      parallaxGroup.add(cloud4);\r\n      parallaxGroup.add(island);\r\n      parallaxGroup.add(lightHouse);\r\n    },\r\n    update(delta, worldState, { batch, width, height, camera, assets }) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      backGround.draw(batch, 0, 0, width, height);\r\n      parallaxGroup.update(delta);\r\n      parallaxGroup.draw(batch);\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import { createBatch, createOrthoCamera, InputHandler, fillRect } from 'gdxjs';\r\nimport { createRenderChoosingScreen } from './StartScreen';\r\n\r\nexport const createRenderGameOverScreen = Game => {\r\n  const goToStartScreen = async () =>\r\n    Game.setCurrentScreen(await createRenderChoosingScreen(Game));\r\n\r\n  const { gl, width, height, canvas, whiteTex } = Game;\r\n\r\n  const batch = createBatch(gl);\r\n  const camera = createOrthoCamera(width, height, width, height);\r\n  const inputHandler = new InputHandler(canvas);\r\n\r\n  inputHandler.addEventListener('touchStart', () => {\r\n    goToStartScreen();\r\n    Game.gender = 1;\r\n  });\r\n\r\n  const update = delta => {\r\n    camera.setPosition(0, 0);\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 0, 0, 1);\r\n    fillRect(batch, whiteTex, 0, 0, width, height);\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  };\r\n};\r\n","import { InputHandler } from 'gdxjs';\r\nimport createWorld from './createWorld';\r\nimport { createPlayerPositionSystem } from './system/PlayerPositionSystem';\r\nimport { createPlayerRenderSystem } from './system/PlayerRenderSystem';\r\nimport { createWaterLineRenderSystem } from './system/WaterLineRenderSystem';\r\nimport { createObstacleSpawnSystem } from './system/ObstacleSpawnSystem';\r\nimport { createObstacleRenderSystem } from './system/ObstacleRenderSystem';\r\nimport { createObstacleCollideSystem } from './system/ObstacleCollideSystem';\r\nimport { createRenderRewardSystem } from './system/RewardRenderSystem';\r\nimport { createRewardSpawnSystem } from './system/RewardSpawnSystem';\r\nimport { createRewardCollideSystem } from './system/RewardCollideSystem';\r\nimport { createBgRenderSystem } from './system/BgRenderSystem';\r\nimport { createWaveRenderSystem } from './system/WaveRenderSystem';\r\nimport { createRenderGameOverScreen } from './GameOverScreen';\r\n\r\nconst createRenderPlayScreen = game => {\r\n  const {\r\n    gender,\r\n    canvas,\r\n    pixelRatio,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    assets\r\n  } = game;\r\n\r\n  const inputHandler = new InputHandler(canvas);\r\n  const wallStarts = [];\r\n\r\n  const GAP = width / 6;\r\n  const PLAYER_INITIAL_Y = (2 * height) / 3;\r\n\r\n  const worldState = {\r\n    gameOver: false,\r\n    gender,\r\n    stateTime: 0,\r\n    playerState: {\r\n      x: GAP,\r\n      y: PLAYER_INITIAL_Y,\r\n      speedX: 0,\r\n      speedY: 0,\r\n      width: width / 8,\r\n      height: width / 7,\r\n      jumping: false,\r\n      stateTime: 0\r\n    },\r\n    waterY: height / 2.1 + height / 20,\r\n    obstacles: [],\r\n    rewards: [],\r\n    gap: GAP,\r\n    lastObstacleX: 2 * width,\r\n    lastRewardX: 2 * width,\r\n    wallStarts: wallStarts,\r\n    obstacleInfos: {\r\n      widths: [width / 9, width / 3, width / 3.5, width / 9],\r\n      heights: [height / 20, height / 4, height / 4, width / 9],\r\n      speedXs: [-width / 2, 0, 0, 0]\r\n    }, // size ve width / 4 , height / 4\r\n    rewardInfos: {\r\n      y: height / 4,\r\n      width: width / 9,\r\n      height: width / 9\r\n    },\r\n    playerInfo: {\r\n      fallingSpeed: height / 2,\r\n      jumpingSpeed: -height * 1.2,\r\n      jumpingDecelerator: height * 2,\r\n      inWaterSpeedX: width / 2,\r\n      onAirSpeedX: width\r\n    }\r\n  };\r\n  const extra = {\r\n    canvas,\r\n    pixelRatio,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    inputHandler,\r\n    assets\r\n  };\r\n  const world = createWorld(worldState, extra);\r\n  world.addSystem(createPlayerPositionSystem(), true);\r\n  world.addSystem(createObstacleSpawnSystem(), true);\r\n  world.addSystem(createObstacleCollideSystem(), true);\r\n  world.addSystem(createRenderRewardSystem(), true);\r\n  world.addSystem(createRewardCollideSystem(), true);\r\n\r\n  world.addSystem(createBgRenderSystem());\r\n  world.addSystem(createWaveRenderSystem());\r\n  // world.addSystem(createWaterLineRenderSystem());\r\n  world.addSystem(createObstacleRenderSystem());\r\n  world.addSystem(createRewardSpawnSystem());\r\n  world.addSystem(createPlayerRenderSystem());\r\n\r\n  const goToGameOverScreen = async () =>\r\n    game.setCurrentScreen(await createRenderGameOverScreen(game));\r\n\r\n  const update = delta => {\r\n    if (!worldState.gameOver) {\r\n      world.update(delta);\r\n    } else {\r\n      // world.update(delta, false);\r\n      goToGameOverScreen();\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  };\r\n};\r\n\r\nexport default createRenderPlayScreen;\r\n","export default (worldState, extra) => {\r\n  const systems = [];\r\n  const passiveSystems = [];\r\n  return {\r\n    addSystem(system, passive = false) {\r\n      system.init && system.init(worldState, extra);\r\n      if (passive) {\r\n        passiveSystems.push(system);\r\n      } else {\r\n        systems.push(system);\r\n      }\r\n    },\r\n    update(delta, runPassive = true) {\r\n      for (let system of systems) {\r\n        system.update(delta, worldState, extra);\r\n      }\r\n      if (runPassive) {\r\n        for (let system of passiveSystems) {\r\n          system.update(delta, worldState, extra);\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createPlayerPositionSystem = inputhandler => {\r\n  return {\r\n    update(delta, worldState, extra) {\r\n      const { inputHandler, height } = extra;\r\n      const {\r\n        playerState,\r\n        waterY,\r\n        playerInfo: {\r\n          fallingSpeed,\r\n          jumpingSpeed,\r\n          jumpingDecelerator,\r\n          inWaterSpeedX,\r\n          onAirSpeedX\r\n        }\r\n      } = worldState;\r\n\r\n      if (playerState.jumping) {\r\n        playerState.speedY += jumpingDecelerator * delta;\r\n        playerState.speedX = onAirSpeedX;\r\n        if (playerState.y + playerState.height > waterY * 1.1) {\r\n          playerState.jumping = false;\r\n        }\r\n      } else {\r\n        playerState.speedX = inWaterSpeedX;\r\n        if (inputHandler.isTouched()) {\r\n          playerState.speedY = -fallingSpeed;\r\n        } else {\r\n          playerState.speedY = fallingSpeed;\r\n        }\r\n        if (playerState.y + playerState.height < waterY * 0.9) {\r\n          playerState.jumping = true;\r\n          playerState.speedY = jumpingSpeed;\r\n        }\r\n      }\r\n\r\n      playerState.x += playerState.speedX * delta;\r\n      playerState.y += playerState.speedY * delta;\r\n\r\n      if (playerState.y > height - playerState.height - height / 10) {\r\n        playerState.y = height - playerState.height - height / 10;\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createObstacleSpawnSystem = () => {\r\n  const generateObstacles = (\r\n    obstacles,\r\n    startX,\r\n    endX,\r\n    height,\r\n    obstacleInfos\r\n  ) => {\r\n    if (Math.random() > 0) {\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: Math.random() * (height / 3 - height / 8) + height / 8,\r\n        type: 0,\r\n        speedX: obstacleInfos.speedXs[0],\r\n        stateTime: 0\r\n      });\r\n    }\r\n    if (Math.random() > 0.5) {\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: height - obstacleInfos.heights[1],\r\n        type: 1,\r\n        speedX: obstacleInfos.speedXs[1],\r\n        stateTime: 0\r\n      });\r\n    } else {\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: height - obstacleInfos.heights[2],\r\n        type: 2,\r\n        speedX: obstacleInfos.speedXs[2],\r\n        stateTime: 0\r\n      });\r\n    }\r\n\r\n    if (Math.random() > 0.3) {\r\n      obstacles.push({\r\n        x: endX,\r\n        y: (height * 2.6) / 4,\r\n        speedX: obstacleInfos.speedXs[3],\r\n        type: 3\r\n      });\r\n    }\r\n  };\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      let {\r\n        playerState: { x },\r\n        obstacles,\r\n        gap,\r\n        lastObstacleX,\r\n        obstacleInfos\r\n      } = worldState;\r\n\r\n      while (lastObstacleX - x < width * 2) {\r\n        generateObstacles(\r\n          obstacles,\r\n          lastObstacleX + width * 2,\r\n          lastObstacleX + width * 4,\r\n          height,\r\n          obstacleInfos\r\n        );\r\n        lastObstacleX = worldState.lastObstacleX = lastObstacleX + width * 2;\r\n      }\r\n\r\n      for (let i = obstacles.length - 1; i >= 0; i--) {\r\n        let { type, x } = obstacles[i];\r\n        if (obstacles[i].x + worldState.obstacleInfos.widths[type] < x - gap) {\r\n          obstacles.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      for (let obstacle of obstacles) {\r\n        obstacle.x += obstacle.speedX * delta;\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createObstacleCollideSystem = () => {\r\n  return {\r\n    update(delta, worldState) {\r\n      const { playerState, obstacles, obstacleInfos } = worldState;\r\n      if (obstacles.length > 0) {\r\n        // console.log(obstacleInfos, obstacles);\r\n        const { widths, heights } = obstacleInfos;\r\n        const pL = playerState.x;\r\n        const pR = playerState.x + playerState.width;\r\n        const pT = playerState.y;\r\n        const pB = playerState.y + playerState.height;\r\n        for (let i = obstacles.length - 1; i >= 0; i--) {\r\n          const { y, type } = obstacles[i];\r\n          const oL = obstacles[i].x;\r\n          const oR = obstacles[i].x + widths[type];\r\n          const oT = y;\r\n          const oB = y + heights[type];\r\n          // console.log(pL, pR, pT, pB, oL, oR, oT, oB);\r\n          if (pL < oR && pR > oL && pT < oB && pB > oT) {\r\n            worldState.gameOver = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","import { fillRect } from 'gdxjs';\r\n\r\nexport const createRenderRewardSystem = () => {\r\n  let rewardArray = [];\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      const reward1 = atlas.findRegion('hop_qua1', -1);\r\n      const reward2 = atlas.findRegion('hop_qua2', -1);\r\n      const reward3 = atlas.findRegion('hop_qua3', -1);\r\n      rewardArray = [\r\n        {\r\n          texTure: reward1,\r\n          width: width / 6,\r\n          height: ((width / 6) * reward1.height) / reward1.width\r\n        },\r\n        {\r\n          texTure: reward2,\r\n          width: width / 6,\r\n          height: ((width / 6) * reward2.height) / reward2.width\r\n        },\r\n        {\r\n          texTure: reward2,\r\n          width: width / 6,\r\n          height: ((width / 6) * reward3.height) / reward3.width\r\n        }\r\n      ];\r\n    },\r\n    update(\r\n      delta,\r\n      { rewards, playerState: { x }, gap },\r\n      { batch, width, height, camera, whiteTex }\r\n    ) {\r\n      camera.setPosition(x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      for (let reward of rewards) {\r\n        if (!reward.hit) {\r\n          const rw = rewardArray[reward.type];\r\n          // fillRect(\r\n          //   batch,\r\n          //   whiteTex,\r\n          //   reward.x,\r\n          //   reward.y,\r\n          //   reward.width,\r\n          //   reward.height\r\n          // );\r\n          rw.texTure.draw(\r\n            batch,\r\n            reward.x + reward.width / 2 - rw.width / 2,\r\n            reward.y + reward.height / 2 - rw.height / 2,\r\n            rw.width,\r\n            rw.height\r\n          );\r\n        }\r\n      }\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","export const createRewardCollideSystem = () => {\r\n  return {\r\n    update(delta, worldState) {\r\n      const { playerState, rewards, rewardInfos } = worldState;\r\n      if (rewards.length > 0) {\r\n        // console.log(obstacleInfos, obstacles);\r\n        const pL = playerState.x;\r\n        const pR = playerState.x + playerState.width;\r\n        const pT = playerState.y;\r\n        const pB = playerState.y + playerState.height;\r\n        for (let i = rewards.length - 1; i >= 0; i--) {\r\n          if (rewards[i].hit) {\r\n            continue;\r\n          }\r\n          const rL = rewards[i].x;\r\n          const rR = rewards[i].x + rewardInfos.width;\r\n          const rT = rewards[i].y;\r\n          const rB = rewardInfos.y + rewardInfos.height;\r\n\r\n          if (pL < rR && pR > rL && pT < rB && pB > rT) {\r\n            rewards[i].hit = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","import { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\n\r\nexport const createWaveRenderSystem = () => {\r\n  let WAVE_WIDTH = 0;\r\n  let WAVE_HEIGHT = 0;\r\n  let stateTime = 0;\r\n  let waveAnimation;\r\n  return {\r\n    init({ waterY }, { width, height, assets }) {\r\n      const atlas = assets.waveAtlas;\r\n      const waveAssets = atlas.findRegions('final wave');\r\n      waveAnimation = createAnimation(0.15, waveAssets);\r\n      WAVE_WIDTH = width;\r\n      WAVE_HEIGHT = (waveAssets[0].height * WAVE_WIDTH) / waveAssets[0].width;\r\n      if (waterY + WAVE_HEIGHT < height) {\r\n        console.log('low');\r\n        WAVE_HEIGHT = height - waterY;\r\n      }\r\n    },\r\n    update(delta, { waterY }, { batch, width, height, camera }) {\r\n      stateTime += delta;\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      waveAnimation\r\n        .getKeyFrame(stateTime, PlayMode.LOOP)\r\n        .draw(batch, 0, waterY - height / 20, WAVE_WIDTH, WAVE_HEIGHT);\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\nexport const createObstacleRenderSystem = () => {\r\n  let rock1Tex;\r\n  let rock2Tex;\r\n  let seaStarTex;\r\n  let birdAnimation;\r\n  let octopusAnimation;\r\n  let crabAnimation;\r\n  let BIRD_WIDTH,\r\n    OCTOPUS_WIDTH,\r\n    CRAB_WIDTH,\r\n    STAR_WIDTH,\r\n    ROCK1_WIDTH,\r\n    ROCK2_WIDTH;\r\n  let BIRD_HEIGHT,\r\n    OCTOPUS_HEIGHT,\r\n    CRAB_HEIGHT,\r\n    STAR_HEIGHT,\r\n    ROCK1_HEIGHT,\r\n    ROCK2_HEIGHT;\r\n\r\n  return {\r\n    init({ obstacleInfos }, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      rock1Tex = atlas.findRegion('cuc_da', 1);\r\n      rock2Tex = atlas.findRegion('cuc_da', 2);\r\n      seaStarTex = atlas.findRegion('sao_bien', -1);\r\n      const bird = atlas.findRegions('chim');\r\n      const octopus = atlas.findRegions('bachtuoc');\r\n      const crab = atlas.findRegions('cua');\r\n      birdAnimation = createAnimation(0.15, bird);\r\n      octopusAnimation = createAnimation(0.15, octopus);\r\n      crabAnimation = createAnimation(0.15, crab);\r\n\r\n      BIRD_WIDTH = width / 5;\r\n      BIRD_HEIGHT = (bird[0].height * BIRD_WIDTH) / bird[0].width;\r\n      ROCK1_HEIGHT = height / 3;\r\n      ROCK1_WIDTH = (ROCK1_HEIGHT * rock1Tex.width) / rock1Tex.height;\r\n      ROCK2_HEIGHT = height / 3;\r\n      ROCK2_WIDTH = (ROCK2_HEIGHT * rock2Tex.width) / rock2Tex.height;\r\n      OCTOPUS_HEIGHT = height / 6;\r\n      OCTOPUS_WIDTH = (octopus[0].width * OCTOPUS_HEIGHT) / octopus[0].height;\r\n      CRAB_HEIGHT = height / 11;\r\n      CRAB_WIDTH = (crab[0].width * CRAB_HEIGHT) / crab[0].height;\r\n      STAR_HEIGHT = height / 12;\r\n      STAR_WIDTH = (STAR_HEIGHT * seaStarTex.width) / seaStarTex.height;\r\n    },\r\n    update(\r\n      delta,\r\n      {\r\n        obstacles,\r\n        playerState: { x },\r\n        gap,\r\n        obstacleInfos: { widths, heights }\r\n      },\r\n      { batch, camera, whiteTex, assets, width, height }\r\n    ) {\r\n      camera.setPosition(x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      for (let obstacle of obstacles) {\r\n        const { type, x, y } = obstacle;\r\n        // fillRect(batch, whiteTex, x, y, widths[type], heights[type]);\r\n        if (type === 0) {\r\n          obstacle.stateTime += delta;\r\n          birdAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x + widths[type] / 2 - BIRD_WIDTH / 2,\r\n              y + heights[type] / 2 - BIRD_HEIGHT / 2,\r\n              BIRD_WIDTH,\r\n              BIRD_HEIGHT\r\n            );\r\n        }\r\n        if (type === 1) {\r\n          obstacle.stateTime += delta;\r\n          rock1Tex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - ROCK1_WIDTH / 2 - width / 16,\r\n            y + heights[type] - ROCK1_HEIGHT + height / 80,\r\n            ROCK1_WIDTH,\r\n            ROCK1_HEIGHT\r\n          );\r\n          crabAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x - CRAB_WIDTH / 2 + width / 20,\r\n              y - CRAB_HEIGHT / 2 + height / 20,\r\n              CRAB_WIDTH,\r\n              CRAB_HEIGHT\r\n            );\r\n          seaStarTex.draw(\r\n            batch,\r\n            x + ROCK1_WIDTH / 5,\r\n            y + ROCK1_HEIGHT / 2.7,\r\n            STAR_WIDTH,\r\n            STAR_HEIGHT\r\n          );\r\n        }\r\n        if (type === 2) {\r\n          obstacle.stateTime += delta;\r\n          rock2Tex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - ROCK2_WIDTH / 2 + width / 16,\r\n            y + heights[type] - ROCK2_HEIGHT + height / 60,\r\n            ROCK2_WIDTH,\r\n            ROCK2_HEIGHT\r\n          );\r\n          octopusAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x - OCTOPUS_WIDTH / 2 + width / 20,\r\n              y - OCTOPUS_WIDTH / 2,\r\n              OCTOPUS_WIDTH,\r\n              OCTOPUS_HEIGHT\r\n            );\r\n        }\r\n        if (type === 3) {\r\n          seaStarTex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - STAR_WIDTH / 2,\r\n            y + heights[type] / 2 - STAR_HEIGHT / 2,\r\n            STAR_WIDTH,\r\n            STAR_HEIGHT\r\n          );\r\n        }\r\n      }\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","export const createRewardSpawnSystem = () => {\r\n  const generateRewards = (\r\n    rewards,\r\n    startX,\r\n    endX,\r\n    height,\r\n    width,\r\n    rewardInfos\r\n  ) => {\r\n    if (Math.random() > 0.7) {\r\n      rewards.push({\r\n        x: endX,\r\n        y: height / 4,\r\n        width: rewardInfos.width,\r\n        height: rewardInfos.width,\r\n        hit: false,\r\n        type: Math.floor(Math.random() * 3)\r\n      });\r\n    }\r\n  };\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      let {\r\n        playerState: { x },\r\n        rewards,\r\n        gap,\r\n        lastRewardX,\r\n        rewardInfos\r\n      } = worldState;\r\n\r\n      while (lastRewardX - x < width * 2) {\r\n        generateRewards(\r\n          rewards,\r\n          lastRewardX + width * 2,\r\n          lastRewardX + width * 4,\r\n          height,\r\n          width,\r\n          rewardInfos\r\n        );\r\n        lastRewardX = worldState.lastRewardX = lastRewardX + width * 2;\r\n      }\r\n      // for (let i = rewards.length - 1; i >= 0; i--) {\r\n      //   if (rewards[i].x + worldState.obstacleInfos.width < x - gap) {\r\n      //     rewards.splice(i, 1);\r\n      //   }\r\n      // }\r\n    }\r\n  };\r\n};\r\n","import { fillRect } from 'gdxjs';\r\nimport { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\n// import {}\r\n\r\nexport const createPlayerRenderSystem = () => {\r\n  let PLAYER_WIDTH = 0;\r\n  let PLAYER_HEIGHT = 0;\r\n  let BUBBLE_WIDTH = 0;\r\n  let BUBBLE_HEIGHT = 0;\r\n  let PLAYER_JUMP_HEIGHT = 0;\r\n  let asset;\r\n  let atlas;\r\n  let playerAnimation;\r\n  let bubbleAnimation;\r\n  let charJump;\r\n  return {\r\n    init({ gender, playerState }, { assets, width, height }) {\r\n      atlas = assets.psAtlas;\r\n      if (gender === 0) {\r\n        asset = atlas.findRegions('male');\r\n        charJump = atlas.findRegion('male_jump', -1);\r\n      } else {\r\n        asset = atlas.findRegions('female');\r\n        charJump = atlas.findRegion('female_jump', -1);\r\n      }\r\n      const bubble = atlas.findRegions('bubble');\r\n\r\n      bubbleAnimation = createAnimation(0.2, bubble);\r\n      playerAnimation = createAnimation(0.3, asset);\r\n      PLAYER_WIDTH = width / 3.2;\r\n      PLAYER_HEIGHT = (asset[0].height * PLAYER_WIDTH) / asset[0].width;\r\n      PLAYER_JUMP_HEIGHT = (charJump.height * PLAYER_WIDTH) / charJump.width;\r\n\r\n      BUBBLE_WIDTH = width / 6;\r\n      BUBBLE_HEIGHT = (bubble[0].height * BUBBLE_WIDTH) / bubble[0].width;\r\n    },\r\n    update(delta, { playerState, gap }, { batch, camera, whiteTex, width }) {\r\n      camera.setPosition(playerState.x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      // fillRect(\r\n      //   batch,\r\n      //   whiteTex,\r\n      //   playerState.x,\r\n      //   playerState.y,\r\n      //   playerState.width,\r\n      //   playerState.height\r\n      // );\r\n      playerState.stateTime += delta;\r\n      if (playerState.jumping) {\r\n        charJump.draw(\r\n          batch,\r\n          playerState.x + playerState.width / 2 - PLAYER_WIDTH / 2,\r\n          playerState.y + playerState.height / 2 - PLAYER_JUMP_HEIGHT / 2,\r\n          PLAYER_WIDTH,\r\n          PLAYER_JUMP_HEIGHT\r\n        );\r\n      } else {\r\n        playerAnimation\r\n          .getKeyFrame(playerState.stateTime, PlayMode.LOOP_PINGPONG)\r\n          .draw(\r\n            batch,\r\n            playerState.x + playerState.width / 2 - PLAYER_WIDTH / 2,\r\n            playerState.y + playerState.height / 2 - PLAYER_HEIGHT / 2,\r\n            PLAYER_WIDTH,\r\n            PLAYER_HEIGHT\r\n          );\r\n      }\r\n      bubbleAnimation\r\n        .getKeyFrame(playerState.stateTime, PlayMode.LOOP_PINGPONG)\r\n        .draw(\r\n          batch,\r\n          playerState.x - PLAYER_WIDTH / 2,\r\n          playerState.y + playerState.height,\r\n          BUBBLE_WIDTH,\r\n          BUBBLE_HEIGHT,\r\n          BUBBLE_WIDTH / 2,\r\n          BUBBLE_HEIGHT / 2,\r\n          0,\r\n          1,\r\n          1\r\n        );\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import createScreen from './utils/createScreen';\r\nimport { InputHandler, createBatch, createOrthoCamera } from 'gdxjs';\r\nimport { checkPointInsideRect } from './utils/coordUtil';\r\n// import createWhiteTexture from 'gl-white-texture';\r\nimport createRenderPlayScreen from './GameScreen';\r\n\r\nexport const createRenderChoosingScreen = Game => {\r\n  const goToPlayScreen = async () =>\r\n    Game.setCurrentScreen(await createRenderPlayScreen(Game));\r\n\r\n  const { gl, width, height, assets, canvas, pixelRatio } = Game;\r\n\r\n  const batch = createBatch(gl);\r\n  const camera = createOrthoCamera(width, height, width, height);\r\n  const inputHandler = new InputHandler(canvas);\r\n  // const whiteTex = createWhiteTexture(gl);\r\n  const atlas = assets.csAtlas;\r\n\r\n  const bg = atlas.findRegion('bg', -1);\r\n  // const BG_WIDTH = width;\r\n  // const BG_HEIGHT = (BG_WIDTH * bg.height) / bg.width;\r\n\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * bg.width) / bg.height;\r\n  console.log(bg.width / bg.height, BG_WIDTH / BG_HEIGHT);\r\n\r\n  const button = atlas.findRegion('btn_play', -1);\r\n  const BUTTON_WIDTH = width / 4;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n\r\n  const choiceChar = atlas.findRegion('select_character', -1);\r\n  const TITLE_WIDTH = (width * 2.81) / 4;\r\n  const TITLE_HEIGHT = (TITLE_WIDTH * choiceChar.height) / choiceChar.width;\r\n\r\n  const female_inactive = atlas.findRegion('fmale__inactive', -1);\r\n  const FI_HEIGHT = height / 3.6;\r\n  const FI_WIDTH = (FI_HEIGHT * female_inactive.width) / female_inactive.height;\r\n\r\n  const female = atlas.findRegion('fmale', -1);\r\n  const F_HEIGHT = height / 2.8;\r\n  const F_WIDTH = (F_HEIGHT * female.width) / female.height;\r\n\r\n  const male_inactive = atlas.findRegion('male_inactive', -1);\r\n  const MI_HEIGHT = height / 3.6;\r\n  const MI_WIDTH = (MI_HEIGHT * male_inactive.width) / male_inactive.height;\r\n\r\n  const male = atlas.findRegion('male', -1);\r\n  const M_HEIGHT = height / 2.8;\r\n  const M_WIDTH = (M_HEIGHT * male.width) / male.height;\r\n\r\n  const MALE_RECT = [\r\n    width / 1.9 + width / 20,\r\n    (height * 4.8) / 6 - MI_HEIGHT,\r\n    MI_WIDTH,\r\n    MI_HEIGHT\r\n  ];\r\n\r\n  const FEMALE_RECT = [\r\n    width / 1.9 - FI_WIDTH - width / 20,\r\n    (height * 4.8) / 6 - MI_HEIGHT,\r\n    FI_WIDTH,\r\n    FI_HEIGHT\r\n  ];\r\n\r\n  const BUTTON_RECT = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 6.2) / 7,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT\r\n  ];\r\n\r\n  let femaleActive = true;\r\n  let point;\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    point = { x: x, y: y };\r\n    if (checkPointInsideRect(point, MALE_RECT, pixelRatio)) {\r\n      femaleActive = false;\r\n      Game.gender = 0;\r\n    }\r\n    if (checkPointInsideRect(point, FEMALE_RECT, pixelRatio)) {\r\n      femaleActive = true;\r\n      Game.gender = 1;\r\n    }\r\n  });\r\n\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    if (checkPointInsideRect(point, BUTTON_RECT, pixelRatio)) {\r\n      goToPlayScreen();\r\n    }\r\n  });\r\n\r\n  return createScreen({\r\n    update(delta) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      // background\r\n      bg.draw(\r\n        batch,\r\n        width / 2 - BG_WIDTH / 2,\r\n        height / 2 - BG_HEIGHT / 2,\r\n        BG_WIDTH,\r\n        BG_HEIGHT\r\n      );\r\n      // play button\r\n      button.draw(\r\n        batch,\r\n        width / 2 - BUTTON_WIDTH / 2,\r\n        (height * 6.2) / 7,\r\n        BUTTON_WIDTH,\r\n        BUTTON_HEIGHT\r\n      );\r\n      // choice char\r\n      choiceChar.draw(\r\n        batch,\r\n        width / 2 - TITLE_WIDTH / 2,\r\n        (height * 5.75) / 7,\r\n        TITLE_WIDTH,\r\n        TITLE_HEIGHT\r\n      );\r\n      // draw char\r\n      if (femaleActive) {\r\n        female.draw(\r\n          batch,\r\n          width / 1.9 - F_WIDTH,\r\n          (height * 4.8) / 6 - F_HEIGHT,\r\n          F_WIDTH,\r\n          F_HEIGHT\r\n        );\r\n        male_inactive.draw(\r\n          batch,\r\n          width / 1.9 + width / 20,\r\n          (height * 4.8) / 6 - MI_HEIGHT,\r\n          MI_WIDTH,\r\n          MI_HEIGHT\r\n        );\r\n      } else {\r\n        male.draw(\r\n          batch,\r\n          width / 1.9,\r\n          (height * 4.8) / 6 - M_HEIGHT,\r\n          M_WIDTH,\r\n          M_HEIGHT\r\n        );\r\n        female_inactive.draw(\r\n          batch,\r\n          width / 1.9 - FI_WIDTH - width / 20,\r\n          (height * 4.8) / 6 - MI_HEIGHT,\r\n          FI_WIDTH,\r\n          FI_HEIGHT\r\n        );\r\n      }\r\n      batch.end();\r\n    },\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  });\r\n};\r\n","import './index.css';\nimport {\n  resizeCanvas,\n  createGameLoop,\n  createBatch,\n  createOrthoCamera,\n  loadTexture,\n  loadAtlas\n} from 'gdxjs';\nimport createWhiteTex from 'gl-white-texture';\nimport { createRenderChoosingScreen } from './StartScreen';\n\nconst init = async () => {\n  const canvas = document.getElementById('main');\n  const pixelRatio = window.devicePixelRatio || 1;\n  const [width, height] = resizeCanvas(canvas, pixelRatio);\n  const gl = canvas.getContext('webgl');\n  const info = document.getElementById('info');\n\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n  const whiteTex = createWhiteTex(gl);\n\n  const bgs = await loadTexture(gl, 'sea.jpg');\n  const choosingScreenAtlas = await loadAtlas(gl, './assets/surf.atlas');\n  const playScreenAtlas = await loadAtlas(gl, './assets/asset_wave.atlas');\n  const waveAtlas = await loadAtlas(gl, './assets/wave.atlas');\n  let assets = {\n    bg: bgs,\n    csAtlas: choosingScreenAtlas,\n    psAtlas: playScreenAtlas,\n    waveAtlas: waveAtlas\n  };\n\n  const Game = {\n    gender: 1,\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    pixelRatio: pixelRatio,\n    assets,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    }\n  };\n\n  Game.setCurrentScreen(await createRenderChoosingScreen(Game));\n\n  gl.clearColor(1, 0.388, 0.012, 1);\n  // gl.clearColor(0, 0, 0, 1);\n  // gl.clearColor(1, 0, 0, 1);\n  const update = delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  const loop = createGameLoop(update);\n  setInterval(() => (info.innerHTML = `FPS: ${loop.getFps()}`), 500);\n};\n\ninit();\n"],"sourceRoot":""}