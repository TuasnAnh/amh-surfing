{"version":3,"sources":["utils/createScreen.js","utils/coordUtil.js","utils/createParallax.js","system/BgRenderSystem.js","GameOverScreen.js","RewardScreen.js","GameScreen.js","createWorld.js","system/PlayerPositionSystem.js","system/ObstacleSpawnSystem.js","system/ObstacleCollideSystem.js","system/RewardRenderSystem.js","system/RewardCollideSystem.js","system/WaveRenderSystem.js","system/ScoreRenderSystem.js","system/ObstacleRenderSystem.js","system/RewardSpawnSystem.js","system/PlayerRenderSystem.js","StartScreen.js","index.js"],"names":["noop","createScreen","update","destroy","checkPointInsideRect","point","verts","DEVICE_PIXEL_RATIO","x","y","minX","maxX","minY","maxY","createParallax","tex","width","height","startX","startY","speedX","gapX","texWidth","texHeight","regionHeight","regionWidth","animateX","delta","draw","batch","offsetX","createBgRenderSystem","parallaxGroup","backGround","init","waterY","assets","atlas","psAtlas","bgSky","findRegion","bgWater","cl1","cl2","cl3","cl4","islandTex","lightHouseTex","waterYN","water","cloud1","cloud2","cloud3","cloud4","island","lightHouse","parallaxes","add","parallax","push","addAll","ps","p","createParallaxGroup","worldState","camera","setPosition","setProjection","combined","begin","setColor","end","createRenderGameOverScreen","Game","goToStartScreen","a","createRenderChoosingScreen","setCurrentScreen","gl","canvas","pixelRatio","createBatch","createOrthoCamera","inputHandler","InputHandler","goAtlas","bg","button","title","BG_HEIGHT","BG_WIDTH","BUTTON_WIDTH","BUTTON_HEIGHT","BUTTON_RECT","TITTLE_HEIGHT","TITTLE_WIDTH","addEventListener","gender","cleanup","createRenderRewardScreen","moquaAtlas","moqua","rewardAtlas","reward","logo","board","rewardBoard","BOARD_WIDTH","BOARD_HEIGHT","LOGO_WIDTH","LOGO_HEIGHT","Y_BOARD","touchToOpen","goodLuck","pingo","info","O_WIDTH","O_HEIGHT","GL_WIDTH","GL_HEIGHT","PINGO_WIDTH","PINGO_HEIGHT","INFO_WIDTH","INFO_HEIGHT","boxsShake","findRegions","boxWin","boxLose","boxShakeAnimation","createAnimation","boxWinAnimation","box","BOX_WIDTH","BOX_HEIGHT","BOX_POSITION","BOX_RECT","BOX_ARRAY","stateTime","choosed","scale","BOX_INDEX","stateTimeWin","RightBox","runOtherBox","i","length","Math","random","splice","randomBoxHaveVoucher","state","round","fillRect","getKeyFrame","PlayMode","LOOP","createRenderPlayScreen","game","whiteTex","GAP","rewardCount","goingUpTime","win","gameOver","playerState","speedY","jumping","obstacles","rewards","gap","lastObstacleX","lastRewardX","obstacleInfos","widths","heights","speedXs","rewardInfos","playerInfo","fallingSpeed","jumpingSpeed","jumpingDecelerator","inWaterSpeedX","onAirSpeedX","world","extra","systems","passiveSystems","addSystem","system","passive","runPassive","createWorld","isTouched","generateObstacles","endX","stopSpawnBird","type","obstacle","createObstacleSpawnSystem","pL","pR","pT","pB","oL","oR","oT","oB","rewardText","reward2","texTure","hit","createRenderRewardSystem","rL","rR","rT","rB","waveAnimation","WAVE_WIDTH","WAVE_HEIGHT","waveAssets","waveAtlas","console","log","createWaveRenderSystem","s0","s1","s2","s3","s4","s5","gift","scoreWidth","scoreHeight","GIFT_WIDTH","GIFT_HEIGHT","X_WIDTH","X_HEIGHT","scoreAtlas","score","GIFT_X","GIFT_Y","currentScore","createScoreRenderSystem","rock1Tex","rock2Tex","seaStarTex","birdAnimation","octopusAnimation","crabAnimation","BIRD_WIDTH","OCTOPUS_WIDTH","CRAB_WIDTH","STAR_WIDTH","ROCK1_WIDTH","ROCK2_WIDTH","BIRD_HEIGHT","OCTOPUS_HEIGHT","CRAB_HEIGHT","STAR_HEIGHT","ROCK1_HEIGHT","ROCK2_HEIGHT","bird","octopus","crab","LOOP_PINGPONG","createObstacleRenderSystem","generateRewards","floor","popUpScreen","canReward","createRewardSpawnSystem","asset","playerAnimation","bubbleAnimation","charJump","PLAYER_WIDTH","PLAYER_HEIGHT","BUBBLE_WIDTH","BUBBLE_HEIGHT","PLAYER_JUMP_HEIGHT","bubble","createPlayerRenderSystem","goToGameOverScreen","goToRewardScreen","delayStateTime","goToPlayScreen","csAtlas","choiceChar","TITLE_WIDTH","TITLE_HEIGHT","female_inactive","FI_HEIGHT","FI_WIDTH","female","F_HEIGHT","F_WIDTH","male_inactive","MI_HEIGHT","MI_WIDTH","male","M_HEIGHT","M_WIDTH","MALE_RECT","FEMALE_RECT","femaleActive","document","getElementById","window","devicePixelRatio","resizeCanvas","getContext","createWhiteTex","loadAtlas","choosingScreenAtlas","playScreenAtlas","loadTexture","screen","currentScreen","clearColor","clear","COLOR_BUFFER_BIT","createGameLoop"],"mappings":"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","file":"static/js/main.cae794d0.chunk.js","sourcesContent":["const noop = () => {};\n\nconst createScreen = ({ update = noop, destroy = noop }) => {\n  return { update, destroy };\n};\n\nexport default createScreen;\n","export const checkPointInsideRect = (point, verts, DEVICE_PIXEL_RATIO = 1) => {\n  const x = point.x * DEVICE_PIXEL_RATIO;\n  const y = point.y * DEVICE_PIXEL_RATIO;\n  // const minX = Math.min(verts[0], verts[2], verts[4], verts[6]);\n  // const maxX = Math.max(verts[0], verts[2], verts[4], verts[6]);\n  // const minY = Math.min(verts[1], verts[3], verts[5], verts[7]);\n  // const maxY = Math.max(verts[1], verts[3], verts[5], verts[7]);\n\n  const minX = verts[0];\n  const maxX = verts[0] + verts[2];\n  const minY = verts[1];\n  const maxY = verts[1] + verts[3];\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\n  return true;\n};\n","import loadTexture from 'gdxjs/lib/loadTexture';\r\n\r\nconst createParallax = (\r\n  tex,\r\n  width,\r\n  height,\r\n  startX,\r\n  startY,\r\n  speedX,\r\n  gapX = 0\r\n) => {\r\n  const texWidth = tex.width;\r\n  const texHeight = tex.height;\r\n  const regionHeight = height;\r\n  const regionWidth = (regionHeight / texHeight) * texWidth;\r\n  let animateX = 0;\r\n\r\n  return {\r\n    update(delta) {\r\n      animateX -= speedX * delta;\r\n      while (animateX <= -(regionWidth + gapX)) {\r\n        animateX += regionWidth + gapX;\r\n      }\r\n    },\r\n    draw(batch) {\r\n      let offsetX = animateX;\r\n      while (offsetX < width) {\r\n        // batch.draw(tex, startX + offsetX, startY, regionWidth, regionHeight);\r\n        tex.draw(batch, startX + offsetX, startY, regionWidth, regionHeight);\r\n        offsetX += regionWidth + gapX;\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const loadParallax = async (\r\n  gl,\r\n  url,\r\n  width,\r\n  height,\r\n  startX,\r\n  startY,\r\n  speedX\r\n) => {\r\n  const tex = await loadTexture(gl, url);\r\n  return createParallax(tex, width, height, startX, startY, speedX);\r\n};\r\n\r\nexport const createParallaxGroup = () => {\r\n  const parallaxes = [];\r\n\r\n  return {\r\n    add: parallax => parallaxes.push(parallax),\r\n    addAll: (...ps) => {\r\n      for (let p of ps) {\r\n        parallaxes.push(p);\r\n      }\r\n    },\r\n    update(delta) {\r\n      for (let parallax of parallaxes) {\r\n        parallax.update(delta);\r\n      }\r\n    },\r\n    draw(batch) {\r\n      for (let parallax of parallaxes) {\r\n        parallax.draw(batch);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default createParallax;\r\n","import createParallax, { createParallaxGroup } from '../utils/createParallax';\r\n// import { fillRect } from 'gdxjs';\r\n\r\nexport const createBgRenderSystem = () => {\r\n  let parallaxGroup;\r\n  let backGround;\r\n  return {\r\n    init({ waterY }, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      const bgSky = atlas.findRegion('parallax_BG_sky', -1);\r\n      const bgWater = atlas.findRegion('parallax_BG_water', -1);\r\n      const cl1 = atlas.findRegion('parallax_BG_cloud1', -1);\r\n      const cl2 = atlas.findRegion('parallax_BG_cloud2', -1);\r\n      const cl3 = atlas.findRegion('parallax_BG_cloud3', -1);\r\n      const cl4 = atlas.findRegion('parallax_BG_cloud4', -1);\r\n      const islandTex = atlas.findRegion('parallax_BG_hondao', -1);\r\n      const lightHouseTex = atlas.findRegion('parallax_BG_ngon_hai_dang', -1);\r\n      backGround = bgSky;\r\n\r\n      let waterYN = waterY + height / 200 - height / 20;\r\n      // const bg = createParallax(bgSky, width, height, 0, 0, 0);\r\n      const water = createParallax(\r\n        bgWater,\r\n        width,\r\n        height,\r\n        -width / 10,\r\n        waterY - height / 20,\r\n        0\r\n      );\r\n      const cloud1 = createParallax(\r\n        cl1,\r\n        width,\r\n        height / 16,\r\n        0,\r\n        waterYN - height / 16,\r\n        width / 10,\r\n        width * 1.5\r\n      );\r\n      const cloud2 = createParallax(\r\n        cl2,\r\n        width,\r\n        height / 11,\r\n        0,\r\n        waterYN - height / 11,\r\n        width / 8,\r\n        width * 1.5\r\n      );\r\n      const cloud3 = createParallax(\r\n        cl3,\r\n        width,\r\n        height / 8,\r\n        0,\r\n        waterYN - height / 8,\r\n        width / 6,\r\n        width * 1.5\r\n      );\r\n      const cloud4 = createParallax(\r\n        cl4,\r\n        width,\r\n        height / 6,\r\n        0,\r\n        waterYN - height / 6,\r\n        width / 4,\r\n        width * 1.5\r\n      );\r\n      const island = createParallax(\r\n        islandTex,\r\n        width,\r\n        height / 30,\r\n        0,\r\n        waterYN - height / 30 + height / 200,\r\n        width / 4,\r\n        width\r\n      );\r\n      const lightHouse = createParallax(\r\n        lightHouseTex,\r\n        width,\r\n        height / 20,\r\n        width,\r\n        waterYN - height / 20,\r\n        width / 4,\r\n        width * 5\r\n      );\r\n      parallaxGroup = createParallaxGroup();\r\n      // parallaxGroup.add(bg);\r\n      parallaxGroup.add(water);\r\n      parallaxGroup.add(cloud1);\r\n      parallaxGroup.add(cloud2);\r\n      parallaxGroup.add(cloud3);\r\n      parallaxGroup.add(cloud4);\r\n      parallaxGroup.add(island);\r\n      parallaxGroup.add(lightHouse);\r\n    },\r\n    update(delta, worldState, { batch, width, height, camera, assets }) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      backGround.draw(batch, 0, 0, width, height);\r\n      parallaxGroup.update(delta);\r\n      parallaxGroup.draw(batch);\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import { createBatch, createOrthoCamera, InputHandler } from 'gdxjs';\r\nimport { createRenderChoosingScreen } from './StartScreen';\r\nimport { checkPointInsideRect } from './utils/coordUtil';\r\n\r\nexport const createRenderGameOverScreen = Game => {\r\n  const goToStartScreen = async () =>\r\n    Game.setCurrentScreen(await createRenderChoosingScreen(Game));\r\n\r\n  const { gl, width, height, canvas, assets, pixelRatio } = Game;\r\n\r\n  const batch = createBatch(gl);\r\n  const camera = createOrthoCamera(width, height, width, height);\r\n  const inputHandler = new InputHandler(canvas);\r\n\r\n  const atlas = assets.goAtlas;\r\n  const bg = atlas.findRegion('surfing_game_asset_screen_4_GAMEOVER', -1);\r\n  const button = atlas.findRegion('reload', -1);\r\n  const title = atlas.findRegion('GAMEOVER', -1);\r\n\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * bg.width) / bg.height;\r\n\r\n  const BUTTON_WIDTH = width / 3;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n  const BUTTON_RECT = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 2.9) / 4,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT\r\n  ];\r\n\r\n  const TITTLE_HEIGHT = height / 3;\r\n  const TITTLE_WIDTH = (TITTLE_HEIGHT * title.width) / title.height;\r\n\r\n  let point = {};\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    point = { x: x, y: y };\r\n    if (checkPointInsideRect(point, BUTTON_RECT, pixelRatio)) {\r\n      goToStartScreen();\r\n      Game.gender = 1;\r\n    }\r\n  });\r\n\r\n  const update = delta => {\r\n    camera.setPosition(0, 0);\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    bg.draw(\r\n      batch,\r\n      width / 2 - BG_WIDTH / 2,\r\n      height / 2 - BG_HEIGHT / 2,\r\n      BG_WIDTH,\r\n      BG_HEIGHT\r\n    );\r\n\r\n    button.draw(\r\n      batch,\r\n      width / 2 - BUTTON_WIDTH / 2,\r\n      (height * 2.9) / 4,\r\n      BUTTON_WIDTH,\r\n      BUTTON_HEIGHT\r\n    );\r\n\r\n    title.draw(\r\n      batch,\r\n      width / 2 - TITTLE_WIDTH / 2,\r\n      (height * 1.3) / 5,\r\n      TITTLE_WIDTH,\r\n      TITTLE_HEIGHT\r\n    );\r\n\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  };\r\n};\r\n","import { fillRect, InputHandler } from 'gdxjs';\r\nimport createAnimation, { PlayMode } from 'gdxjs/lib/createAnimation';\r\nimport { checkPointInsideRect } from './utils/coordUtil';\r\n\r\nexport const createRenderRewardScreen = Game => {\r\n  const { width, height, camera, batch, assets, canvas, pixelRatio } = Game;\r\n\r\n  const moquaAtlas = assets.moqua;\r\n  const rewardAtlas = assets.reward;\r\n\r\n  const inputHandler = new InputHandler(canvas);\r\n  // back ground infor\r\n  const bg = rewardAtlas.findRegion('endBG', -1);\r\n  const logo = rewardAtlas.findRegion('logo', -1);\r\n  const board = assets.rewardBoard;\r\n\r\n  const BOARD_WIDTH = width;\r\n  const BOARD_HEIGHT = (BOARD_WIDTH * board.height) / board.width;\r\n\r\n  const LOGO_WIDTH = width / 2;\r\n  const LOGO_HEIGHT = (LOGO_WIDTH * logo.height) / logo.width;\r\n\r\n  const Y_BOARD = (height * 4.3) / 8 - BOARD_HEIGHT / 2;\r\n  /// text infor\r\n  const touchToOpen = rewardAtlas.findRegion('nhandemo', -1);\r\n  const goodLuck = rewardAtlas.findRegion('goodluck', -1); // k mo ra\r\n  const pingo = rewardAtlas.findRegion('nhanduoc', -1); // mo ra line 1\r\n  const info = rewardAtlas.findRegion('thongtin', -1); // mo ra line 2\r\n\r\n  const O_WIDTH = width / 1.7;\r\n  const O_HEIGHT = (O_WIDTH * touchToOpen.height) / touchToOpen.width;\r\n  const GL_WIDTH = width / 1.8;\r\n  const GL_HEIGHT = (GL_WIDTH * goodLuck.height) / goodLuck.width;\r\n  const PINGO_WIDTH = width / 2.1;\r\n  const PINGO_HEIGHT = (PINGO_WIDTH * pingo.height) / pingo.width;\r\n  const INFO_WIDTH = width / 2;\r\n  const INFO_HEIGHT = (INFO_WIDTH * info.height) / info.width;\r\n\r\n  // box infor\r\n  const boxsShake = moquaAtlas.findRegions('moqua');\r\n  const boxWin = moquaAtlas.findRegions('moqua_voucher');\r\n  const boxLose = moquaAtlas.findRegion('moqua_empty', -1);\r\n  const boxShakeAnimation = createAnimation(0.1, boxsShake);\r\n  const boxWinDuration = 0.2;\r\n  const boxWinAnimation = createAnimation(boxWinDuration, boxWin);\r\n  const box = boxsShake[0];\r\n  const BOX_WIDTH = width / 5.5;\r\n  const BOX_HEIGHT = (BOX_WIDTH * box.height) / box.width;\r\n\r\n  const BOX_POSITION = [\r\n    [width / 2 - width / 100 - BOX_WIDTH, Y_BOARD + BOARD_HEIGHT * 0.49],\r\n    [width / 2 + width / 100, Y_BOARD + BOARD_HEIGHT * 0.49],\r\n    [width / 2 - width / 11 - BOX_WIDTH, Y_BOARD + BOARD_HEIGHT * 0.63],\r\n    [width / 2 + width / 11, Y_BOARD + BOARD_HEIGHT * 0.63],\r\n    [width / 2 - BOX_WIDTH / 2, Y_BOARD + BOARD_HEIGHT * 0.7]\r\n  ];\r\n\r\n  // hit box check\r\n  const BOX_RECT = [\r\n    [\r\n      width / 2 -\r\n        width / 100 -\r\n        BOX_WIDTH +\r\n        BOX_WIDTH / 2 -\r\n        (BOX_WIDTH * 0.9) / 2,\r\n      Y_BOARD + BOARD_HEIGHT * 0.49 + BOX_HEIGHT / 2 - (BOX_HEIGHT * 0.7) / 2,\r\n      BOX_WIDTH * 0.9,\r\n      BOX_HEIGHT * 0.8\r\n    ],\r\n    [\r\n      width / 2 + width / 100 + BOX_WIDTH / 2 - (BOX_WIDTH * 0.9) / 2,\r\n      Y_BOARD + BOARD_HEIGHT * 0.49 + BOX_HEIGHT / 2 - (BOX_HEIGHT * 0.7) / 2,\r\n      BOX_WIDTH * 0.9,\r\n      BOX_HEIGHT * 0.8\r\n    ],\r\n    [\r\n      width / 2 -\r\n        width / 11 -\r\n        BOX_WIDTH +\r\n        BOX_WIDTH / 2 -\r\n        (BOX_WIDTH * 0.9) / 2,\r\n      Y_BOARD + BOARD_HEIGHT * 0.63 + BOX_HEIGHT / 2 - (BOX_HEIGHT * 0.7) / 2,\r\n      BOX_WIDTH * 0.9,\r\n      BOX_HEIGHT * 0.8\r\n    ],\r\n    [\r\n      width / 2 + width / 11 + BOX_WIDTH / 2 - (BOX_WIDTH * 0.9) / 2,\r\n      Y_BOARD + BOARD_HEIGHT * 0.63 + BOX_HEIGHT / 2 - (BOX_HEIGHT * 0.7) / 2,\r\n      BOX_WIDTH * 0.9,\r\n      BOX_HEIGHT * 0.8\r\n    ],\r\n    [\r\n      width / 2 - BOX_WIDTH / 2 + BOX_WIDTH / 2 - (BOX_WIDTH * 0.9) / 2,\r\n      Y_BOARD + BOARD_HEIGHT * 0.7 + BOX_HEIGHT / 2 - (BOX_HEIGHT * 0.7) / 2,\r\n      BOX_WIDTH * 0.9,\r\n      BOX_HEIGHT * 0.8\r\n    ]\r\n  ];\r\n\r\n  const BOX_ARRAY = [\r\n    { stateTime: 0, choosed: false, scale: 1 },\r\n    { stateTime: 0, choosed: false, scale: 1 },\r\n    { stateTime: 0, choosed: false, scale: 1 },\r\n    { stateTime: 0, choosed: false, scale: 1 },\r\n    { stateTime: 0, choosed: false, scale: 1 }\r\n  ];\r\n\r\n  let BOX_INDEX = [0, 1, 2, 3, 4];\r\n\r\n  let stateTimeWin = 0; // statTime for voucher animation\r\n  let RightBox = false;\r\n  let RightBoxChance = 0.5;\r\n  let runOtherBox = false;\r\n\r\n  let point = {};\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    point = { x: x, y: y };\r\n    for (let i = 0; i < BOX_ARRAY.length; i++) {\r\n      if (checkPointInsideRect(point, BOX_RECT[i], pixelRatio)) {\r\n        if (Math.random() > RightBoxChance) {\r\n          RightBox = true;\r\n        } else {\r\n          BOX_INDEX.splice(i, 1);\r\n        }\r\n        BOX_ARRAY[i].choosed = true;\r\n        inputHandler.cleanup();\r\n      }\r\n    }\r\n  });\r\n\r\n  let randomBoxHaveVoucher = -1;\r\n  let state = 0; //\r\n\r\n  const update = delta => {\r\n    if (!RightBox && BOX_INDEX.length < 5) {\r\n      randomBoxHaveVoucher = BOX_INDEX[Math.round(Math.random() * 3)];\r\n      BOX_INDEX.length = 6;\r\n    }\r\n\r\n    camera.setPosition(0, 0);\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    // draw background\r\n    bg.draw(batch, 0, 0, width, height);\r\n    logo.draw(\r\n      batch,\r\n      width / 2 - LOGO_WIDTH / 2,\r\n      height / 15,\r\n      LOGO_WIDTH,\r\n      LOGO_HEIGHT\r\n    );\r\n\r\n    fillRect(\r\n      batch,\r\n      board,\r\n      width / 2 - BOARD_WIDTH / 2,\r\n      Y_BOARD,\r\n      BOARD_WIDTH,\r\n      BOARD_HEIGHT\r\n    );\r\n    // draw text\r\n    if (state === 0) {\r\n      touchToOpen.draw(\r\n        batch,\r\n        width / 2 - O_WIDTH / 2,\r\n        Y_BOARD + BOARD_HEIGHT * 0.39,\r\n        O_WIDTH,\r\n        O_HEIGHT\r\n      );\r\n    } else if (state === 1) {\r\n      goodLuck.draw(\r\n        batch,\r\n        width / 2 - GL_WIDTH / 2,\r\n        Y_BOARD + BOARD_HEIGHT * 0.42,\r\n        GL_WIDTH,\r\n        GL_HEIGHT\r\n      );\r\n    } else if (state === 2) {\r\n      pingo.draw(\r\n        batch,\r\n        width / 2 - PINGO_WIDTH / 2,\r\n        Y_BOARD + BOARD_HEIGHT * 0.37,\r\n        PINGO_WIDTH,\r\n        PINGO_HEIGHT\r\n      );\r\n      info.draw(\r\n        batch,\r\n        width / 2 - INFO_WIDTH / 2,\r\n        Y_BOARD + BOARD_HEIGHT * 0.88,\r\n        INFO_WIDTH,\r\n        INFO_HEIGHT\r\n      );\r\n    }\r\n\r\n    for (let i = 0; i < BOX_ARRAY.length; i++) {\r\n      if (BOX_ARRAY[i].choosed) {\r\n        BOX_ARRAY[i].scale = 1.3;\r\n      }\r\n      if (!BOX_ARRAY[i].choosed && !runOtherBox) {\r\n        box.draw(\r\n          batch,\r\n          BOX_POSITION[i][0],\r\n          BOX_POSITION[i][1],\r\n          BOX_WIDTH,\r\n          BOX_HEIGHT,\r\n          BOX_WIDTH / 2,\r\n          BOX_HEIGHT / 2,\r\n          0,\r\n          BOX_ARRAY[i].scale,\r\n          BOX_ARRAY[i].scale\r\n        );\r\n      } else if (BOX_ARRAY[i].choosed) {\r\n        if (BOX_ARRAY[i].stateTime < 1.2) {\r\n          BOX_ARRAY[i].stateTime += delta;\r\n          boxShakeAnimation\r\n            .getKeyFrame(BOX_ARRAY[i].stateTime, PlayMode.LOOP)\r\n            .draw(\r\n              batch,\r\n              BOX_POSITION[i][0],\r\n              BOX_POSITION[i][1],\r\n              BOX_WIDTH,\r\n              BOX_HEIGHT,\r\n              BOX_WIDTH / 2,\r\n              BOX_HEIGHT / 2,\r\n              0,\r\n              BOX_ARRAY[i].scale,\r\n              BOX_ARRAY[i].scale\r\n            );\r\n        } else {\r\n          if (RightBox) {\r\n            stateTimeWin += delta;\r\n            if (stateTimeWin >= boxWinDuration * (boxWin.length - 1)) {\r\n              state = 2;\r\n              runOtherBox = true;\r\n              stateTimeWin = boxWinDuration;\r\n            }\r\n            boxWinAnimation\r\n              .getKeyFrame(stateTimeWin, PlayMode.LOOP)\r\n              .draw(\r\n                batch,\r\n                BOX_POSITION[i][0],\r\n                BOX_POSITION[i][1],\r\n                BOX_WIDTH,\r\n                BOX_HEIGHT,\r\n                BOX_WIDTH / 2,\r\n                BOX_HEIGHT / 2,\r\n                0,\r\n                BOX_ARRAY[i].scale,\r\n                BOX_ARRAY[i].scale\r\n              );\r\n          } else {\r\n            boxLose.draw(\r\n              batch,\r\n              BOX_POSITION[i][0],\r\n              BOX_POSITION[i][1],\r\n              BOX_WIDTH,\r\n              BOX_HEIGHT,\r\n              BOX_WIDTH / 2,\r\n              BOX_HEIGHT / 2,\r\n              0,\r\n              BOX_ARRAY[i].scale,\r\n              BOX_ARRAY[i].scale\r\n            );\r\n            state = 1;\r\n            runOtherBox = true;\r\n          }\r\n        }\r\n      }\r\n      // batch.draw(\r\n      //   whiteTex,\r\n      //   BOX_RECT[i][0],\r\n      //   BOX_RECT[i][1],\r\n      //   BOX_RECT[i][2],\r\n      //   BOX_RECT[i][3]\r\n      // );\r\n    }\r\n\r\n    for (let i = 0; i < BOX_ARRAY.length; i++) {\r\n      if (!BOX_ARRAY[i].choosed && runOtherBox) {\r\n        if (BOX_ARRAY[i].stateTime <= 0.5) {\r\n          BOX_ARRAY[i].stateTime += delta;\r\n          boxShakeAnimation\r\n            .getKeyFrame(BOX_ARRAY[i].stateTime, PlayMode.LOOP)\r\n            .draw(\r\n              batch,\r\n              BOX_POSITION[i][0],\r\n              BOX_POSITION[i][1],\r\n              BOX_WIDTH,\r\n              BOX_HEIGHT,\r\n              BOX_WIDTH / 2,\r\n              BOX_HEIGHT / 2,\r\n              0,\r\n              BOX_ARRAY[i].scale,\r\n              BOX_ARRAY[i].scale\r\n            );\r\n        }\r\n        if (BOX_ARRAY[i].stateTime > 0.5) {\r\n          if (i === randomBoxHaveVoucher) {\r\n            stateTimeWin += delta;\r\n            if (stateTimeWin >= boxWinDuration * (boxWin.length - 1)) {\r\n              runOtherBox = true;\r\n              stateTimeWin = boxWinDuration;\r\n            }\r\n            boxWinAnimation\r\n              .getKeyFrame(stateTimeWin, PlayMode.LOOP)\r\n              .draw(\r\n                batch,\r\n                BOX_POSITION[i][0],\r\n                BOX_POSITION[i][1],\r\n                BOX_WIDTH,\r\n                BOX_HEIGHT,\r\n                BOX_WIDTH / 2,\r\n                BOX_HEIGHT / 2,\r\n                0,\r\n                BOX_ARRAY[i].scale,\r\n                BOX_ARRAY[i].scale\r\n              );\r\n          } else {\r\n            boxLose.draw(\r\n              batch,\r\n              BOX_POSITION[i][0],\r\n              BOX_POSITION[i][1],\r\n              BOX_WIDTH,\r\n              BOX_HEIGHT,\r\n              BOX_WIDTH / 2,\r\n              BOX_HEIGHT / 2,\r\n              0,\r\n              BOX_ARRAY[i].scale,\r\n              BOX_ARRAY[i].scale\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    batch.end();\r\n  };\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  };\r\n};\r\n","import { InputHandler } from 'gdxjs';\r\nimport createWorld from './createWorld';\r\nimport { createPlayerPositionSystem } from './system/PlayerPositionSystem';\r\nimport { createPlayerRenderSystem } from './system/PlayerRenderSystem';\r\n// import { createWaterLineRenderSystem } from './system/WaterLineRenderSystem';\r\nimport { createObstacleSpawnSystem } from './system/ObstacleSpawnSystem';\r\nimport { createObstacleRenderSystem } from './system/ObstacleRenderSystem';\r\nimport { createObstacleCollideSystem } from './system/ObstacleCollideSystem';\r\nimport { createRenderRewardSystem } from './system/RewardRenderSystem';\r\nimport { createRewardSpawnSystem } from './system/RewardSpawnSystem';\r\nimport { createRewardCollideSystem } from './system/RewardCollideSystem';\r\nimport { createBgRenderSystem } from './system/BgRenderSystem';\r\nimport { createWaveRenderSystem } from './system/WaveRenderSystem';\r\nimport { createRenderGameOverScreen } from './GameOverScreen';\r\nimport { createRenderRewardScreen } from './RewardScreen';\r\nimport { createScoreRenderSystem } from './system/ScoreRenderSystem';\r\n\r\nconst createRenderPlayScreen = game => {\r\n  const {\r\n    gender,\r\n    canvas,\r\n    pixelRatio,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    assets\r\n  } = game;\r\n\r\n  const inputHandler = new InputHandler(canvas);\r\n\r\n  const GAP = width / 6;\r\n  const PLAYER_INITIAL_Y = (2 * height) / 3;\r\n\r\n  const worldState = {\r\n    rewardCount: 0,\r\n    goingUpTime: 0,\r\n    win: false,\r\n    gameOver: false,\r\n    gender,\r\n    stateTime: 0,\r\n    playerState: {\r\n      x: GAP,\r\n      y: PLAYER_INITIAL_Y,\r\n      speedX: 0,\r\n      speedY: 0,\r\n      width: width / 8,\r\n      height: width / 7,\r\n      jumping: false,\r\n      stateTime: 0\r\n    },\r\n    waterY: height / 2.1 + height / 20,\r\n    obstacles: [],\r\n    rewards: [],\r\n    gap: GAP,\r\n    lastObstacleX: 2 * width,\r\n    lastRewardX: 2 * width,\r\n    obstacleInfos: {\r\n      // [bird, rock1, rock2, seaStar]\r\n      widths: [width / 9, width / 3, width / 3.5, width / 9],\r\n      heights: [height / 20, height / 4, height / 4, width / 9],\r\n      speedXs: [-width / 3, 0, 0, 0]\r\n    },\r\n    rewardInfos: {\r\n      width: width / 9,\r\n      height: width / 9\r\n    },\r\n    playerInfo: {\r\n      fallingSpeed: height / 3,\r\n      jumpingSpeed: -height * 1.2,\r\n      jumpingDecelerator: height * 2,\r\n      inWaterSpeedX: width / 2,\r\n      onAirSpeedX: width\r\n    }\r\n  };\r\n  const extra = {\r\n    canvas,\r\n    pixelRatio,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    camera,\r\n    whiteTex,\r\n    inputHandler,\r\n    assets\r\n  };\r\n  const world = createWorld(worldState, extra);\r\n  world.addSystem(createPlayerPositionSystem(), true);\r\n  world.addSystem(createObstacleSpawnSystem(), true);\r\n  world.addSystem(createObstacleCollideSystem(), true);\r\n  world.addSystem(createRenderRewardSystem(), true);\r\n  world.addSystem(createRewardCollideSystem(), true);\r\n\r\n  world.addSystem(createBgRenderSystem());\r\n  world.addSystem(createWaveRenderSystem());\r\n  world.addSystem(createScoreRenderSystem());\r\n  // world.addSystem(createWaterLineRenderSystem());\r\n  world.addSystem(createObstacleRenderSystem());\r\n  world.addSystem(createRewardSpawnSystem());\r\n  world.addSystem(createPlayerRenderSystem());\r\n\r\n  const goToGameOverScreen = async () =>\r\n    game.setCurrentScreen(await createRenderGameOverScreen(game));\r\n\r\n  const goToRewardScreen = async () => {\r\n    game.setCurrentScreen(await createRenderRewardScreen(game));\r\n  };\r\n\r\n  let delayStateTime = 0;\r\n  const update = delta => {\r\n    if (worldState.rewardCount === 5) {\r\n      delayStateTime += delta;\r\n      world.update(delta);\r\n      if (delayStateTime >= 0.5) {\r\n        goToRewardScreen();\r\n      }\r\n    } else {\r\n      if (!worldState.gameOver) {\r\n        worldState.stateTime += delta;\r\n        world.update(delta);\r\n      } else {\r\n        // world.update(delta, false);\r\n        goToGameOverScreen();\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  };\r\n};\r\n\r\nexport default createRenderPlayScreen;\r\n","export default (worldState, extra) => {\r\n  const systems = [];\r\n  const passiveSystems = [];\r\n  return {\r\n    addSystem(system, passive = false) {\r\n      system.init && system.init(worldState, extra);\r\n      if (passive) {\r\n        passiveSystems.push(system);\r\n      } else {\r\n        systems.push(system);\r\n      }\r\n    },\r\n    update(delta, runPassive = true) {\r\n      for (let system of systems) {\r\n        system.update(delta, worldState, extra);\r\n      }\r\n      if (runPassive) {\r\n        for (let system of passiveSystems) {\r\n          system.update(delta, worldState, extra);\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createPlayerPositionSystem = inputhandler => {\r\n  return {\r\n    update(delta, worldState, extra) {\r\n      const { inputHandler, height } = extra;\r\n      const {\r\n        playerState,\r\n        waterY,\r\n        playerInfo: {\r\n          fallingSpeed,\r\n          jumpingSpeed,\r\n          jumpingDecelerator,\r\n          inWaterSpeedX,\r\n          onAirSpeedX\r\n        }\r\n      } = worldState;\r\n\r\n      if (playerState.jumping) {\r\n        playerState.speedY += jumpingDecelerator * delta;\r\n        playerState.speedX = onAirSpeedX;\r\n        if (playerState.y + playerState.height > waterY * 1.1) {\r\n          playerState.jumping = false;\r\n        }\r\n      } else {\r\n        playerState.speedX = inWaterSpeedX;\r\n        if (inputHandler.isTouched()) {\r\n          worldState.goingUpTime = worldState.stateTime + 0.15;\r\n        }\r\n        if (worldState.goingUpTime >= worldState.stateTime) {\r\n          playerState.speedY = -fallingSpeed;\r\n        } else {\r\n          playerState.speedY = fallingSpeed / 2;\r\n        }\r\n        if (playerState.y + playerState.height < waterY * 0.9) {\r\n          playerState.jumping = true;\r\n          playerState.speedY = jumpingSpeed;\r\n        }\r\n      }\r\n\r\n      playerState.x += playerState.speedX * delta;\r\n      playerState.y += playerState.speedY * delta;\r\n\r\n      if (playerState.y > height - playerState.height - height / 10) {\r\n        playerState.y = height - playerState.height - height / 10;\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createObstacleSpawnSystem = () => {\r\n  const generateObstacles = (\r\n    obstacles,\r\n    startX,\r\n    endX,\r\n    height,\r\n    obstacleInfos,\r\n    stopSpawnBird\r\n  ) => {\r\n    if (Math.random() > 0.4) {\r\n      // bird\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: Math.random() * (height / 3 - height / 8) + height / 8,\r\n        type: 0,\r\n        speedX: obstacleInfos.speedXs[0],\r\n        stateTime: 0\r\n      });\r\n    }\r\n    if (Math.random() > 0.5) {\r\n      // rock1\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: height - obstacleInfos.heights[1],\r\n        type: 1,\r\n        speedX: obstacleInfos.speedXs[1],\r\n        stateTime: 0\r\n      });\r\n    } else {\r\n      // rock2\r\n      obstacles.push({\r\n        x: (endX + startX) / 2,\r\n        y: height - obstacleInfos.heights[2],\r\n        type: 2,\r\n        speedX: obstacleInfos.speedXs[2],\r\n        stateTime: 0\r\n      });\r\n    }\r\n\r\n    if (Math.random() > 0.3) {\r\n      // sea star\r\n      obstacles.push({\r\n        x: endX,\r\n        y: (height * 2.6) / 4,\r\n        speedX: obstacleInfos.speedXs[3],\r\n        type: 3\r\n      });\r\n    }\r\n  };\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      let {\r\n        playerState: { x },\r\n        obstacles,\r\n        gap,\r\n        lastObstacleX,\r\n        obstacleInfos\r\n      } = worldState;\r\n\r\n      while (lastObstacleX - x < width * 2) {\r\n        generateObstacles(\r\n          obstacles,\r\n          lastObstacleX + width * 2,\r\n          lastObstacleX + width * 4,\r\n          height,\r\n          obstacleInfos,\r\n          worldState.stopSpawnBird\r\n        );\r\n        lastObstacleX = worldState.lastObstacleX = lastObstacleX + width * 2;\r\n      }\r\n\r\n      for (let i = obstacles.length - 1; i >= 0; i--) {\r\n        let { type, x } = obstacles[i];\r\n        if (obstacles[i].x + worldState.obstacleInfos.widths[type] < x - gap) {\r\n          obstacles.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      for (let obstacle of obstacles) {\r\n        obstacle.x += obstacle.speedX * delta;\r\n      }\r\n    }\r\n  };\r\n};\r\n","export const createObstacleCollideSystem = () => {\r\n  return {\r\n    update(delta, worldState) {\r\n      const { playerState, obstacles, obstacleInfos } = worldState;\r\n      if (obstacles.length > 0) {\r\n        // console.log(obstacleInfos, obstacles);\r\n        const { widths, heights } = obstacleInfos;\r\n        const pL = playerState.x;\r\n        const pR = playerState.x + playerState.width;\r\n        const pT = playerState.y;\r\n        const pB = playerState.y + playerState.height;\r\n        for (let i = obstacles.length - 1; i >= 0; i--) {\r\n          const { x, y, type } = obstacles[i];\r\n          const oL = x;\r\n          const oR = x + widths[type];\r\n          const oT = y;\r\n          const oB = y + heights[type];\r\n          // console.log(pL, pR, pT, pB, oL, oR, oT, oB);\r\n          if (pL < oR && pR > oL && pT < oB && pB > oT) {\r\n            worldState.gameOver = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","// import { fillRect } from 'gdxjs';\r\n\r\nexport const createRenderRewardSystem = () => {\r\n  let rewardText = 0;\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      const reward2 = atlas.findRegion('hop_qua2', -1);\r\n      rewardText = {\r\n        texTure: reward2,\r\n        width: width / 6,\r\n        height: ((width / 6) * reward2.height) / reward2.width\r\n      };\r\n    },\r\n    update(\r\n      delta,\r\n      { rewards, playerState: { x }, gap },\r\n      { batch, width, height, camera, whiteTex }\r\n    ) {\r\n      camera.setPosition(x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      for (let reward of rewards) {\r\n        if (!reward.hit) {\r\n          // fillRect(\r\n          //   batch,\r\n          //   whiteTex,\r\n          //   reward.x,\r\n          //   reward.y,\r\n          //   reward.width,\r\n          //   reward.height\r\n          // );\r\n          rewardText.texTure.draw(\r\n            batch,\r\n            reward.x + reward.width / 2 - rewardText.width / 2,\r\n            reward.y + reward.height / 2 - rewardText.height / 2,\r\n            rewardText.width,\r\n            rewardText.height\r\n          );\r\n        }\r\n      }\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","export const createRewardCollideSystem = () => {\r\n  return {\r\n    update(delta, worldState) {\r\n      const { playerState, rewards, rewardInfos } = worldState;\r\n      if (rewards.length > 0) {\r\n        // console.log(obstacleInfos, obstacles);\r\n        const pL = playerState.x;\r\n        const pR = playerState.x + playerState.width;\r\n        const pT = playerState.y;\r\n        const pB = playerState.y + playerState.height;\r\n        for (let i = rewards.length - 1; i >= 0; i--) {\r\n          if (rewards[i].hit) {\r\n            continue;\r\n          }\r\n          const rL = rewards[i].x;\r\n          const rR = rewards[i].x + rewardInfos.width;\r\n          const rT = rewards[i].y;\r\n          const rB = rewards[i].y + rewardInfos.height;\r\n\r\n          if (pL < rR && pR > rL && pT < rB && pB > rT) {\r\n            rewards[i].hit = true;\r\n            worldState.rewardCount += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","import { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\n\r\nexport const createWaveRenderSystem = () => {\r\n  let WAVE_WIDTH = 0;\r\n  let WAVE_HEIGHT = 0;\r\n  let stateTime = 0;\r\n  let waveAnimation;\r\n  return {\r\n    init({ waterY }, { width, height, assets }) {\r\n      const atlas = assets.waveAtlas;\r\n      const waveAssets = atlas.findRegions('final wave');\r\n      waveAnimation = createAnimation(0.1, waveAssets);\r\n      WAVE_WIDTH = width;\r\n      WAVE_HEIGHT = (waveAssets[0].height * WAVE_WIDTH) / waveAssets[0].width;\r\n      if (waterY + WAVE_HEIGHT < height) {\r\n        console.log('low');\r\n        WAVE_HEIGHT = height - waterY;\r\n      }\r\n    },\r\n    update(delta, { waterY }, { batch, width, height, camera }) {\r\n      stateTime += delta;\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      waveAnimation\r\n        .getKeyFrame(stateTime, PlayMode.LOOP)\r\n        .draw(batch, 0, waterY - height / 20, WAVE_WIDTH, WAVE_HEIGHT);\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","export const createScoreRenderSystem = () => {\r\n  let scoreWidth = [];\r\n  let scoreHeight = 0;\r\n  let GIFT_WIDTH = 0;\r\n  let GIFT_HEIGHT = 0;\r\n  let X_WIDTH = 0;\r\n  let X_HEIGHT = 0;\r\n  let s0, s1, s2, s3, s4, s5, gift, x;\r\n\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const scoreAtlas = assets.score;\r\n      s0 = scoreAtlas.findRegion('0_score', -1);\r\n      s1 = scoreAtlas.findRegion('1_score', -1);\r\n      s2 = scoreAtlas.findRegion('2_score', -1);\r\n      s3 = scoreAtlas.findRegion('3_score', -1);\r\n      s4 = scoreAtlas.findRegion('4_score', -1);\r\n      s5 = scoreAtlas.findRegion('5_score', -1);\r\n      scoreHeight = height / 26;\r\n      scoreWidth = [\r\n        (scoreHeight * s0.width) / s0.height,\r\n        (scoreHeight * s1.width) / s1.height,\r\n        (scoreHeight * s2.width) / s2.height,\r\n        (scoreHeight * s3.width) / s3.height,\r\n        (scoreHeight * s4.width) / s4.height,\r\n        (scoreHeight * s5.width) / s5.height\r\n      ];\r\n      gift = scoreAtlas.findRegion('hopqua_score', -1);\r\n      x = scoreAtlas.findRegion('x_score', -1);\r\n\r\n      GIFT_HEIGHT = height / 16;\r\n      GIFT_WIDTH = (GIFT_HEIGHT * gift.width) / gift.height;\r\n\r\n      X_HEIGHT = height / 45;\r\n      X_WIDTH = (X_HEIGHT * x.width) / x.height;\r\n    },\r\n    update(delta, worldState, { batch, camera, width, height }) {\r\n      const GIFT_X = width / 16;\r\n      const GIFT_Y = height / 50;\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      gift.draw(batch, GIFT_X, GIFT_Y, GIFT_WIDTH, GIFT_HEIGHT);\r\n      x.draw(\r\n        batch,\r\n        GIFT_X + (GIFT_WIDTH * 3.5) / 5,\r\n        GIFT_Y + (GIFT_HEIGHT * 3.5) / 5,\r\n        X_WIDTH,\r\n        X_HEIGHT\r\n      );\r\n\r\n      let currentScore = 0;\r\n      if (worldState.rewardCount === 0) currentScore = s0;\r\n      if (worldState.rewardCount === 1) currentScore = s1;\r\n      if (worldState.rewardCount === 2) currentScore = s2;\r\n      if (worldState.rewardCount === 3) currentScore = s3;\r\n      if (worldState.rewardCount === 4) currentScore = s4;\r\n      if (worldState.rewardCount === 5) currentScore = s5;\r\n\r\n      currentScore.draw(\r\n        batch,\r\n        GIFT_X + GIFT_WIDTH * 1.2,\r\n        GIFT_Y + GIFT_HEIGHT - scoreHeight,\r\n        scoreWidth[worldState.rewardCount],\r\n        scoreHeight\r\n      );\r\n\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\nexport const createObstacleRenderSystem = () => {\r\n  let rock1Tex;\r\n  let rock2Tex;\r\n  let seaStarTex;\r\n  let birdAnimation;\r\n  let octopusAnimation;\r\n  let crabAnimation;\r\n  let BIRD_WIDTH,\r\n    OCTOPUS_WIDTH,\r\n    CRAB_WIDTH,\r\n    STAR_WIDTH,\r\n    ROCK1_WIDTH,\r\n    ROCK2_WIDTH;\r\n  let BIRD_HEIGHT,\r\n    OCTOPUS_HEIGHT,\r\n    CRAB_HEIGHT,\r\n    STAR_HEIGHT,\r\n    ROCK1_HEIGHT,\r\n    ROCK2_HEIGHT;\r\n\r\n  return {\r\n    init({ obstacleInfos }, { assets, width, height }) {\r\n      const atlas = assets.psAtlas;\r\n      rock1Tex = atlas.findRegion('cuc_da', 1);\r\n      rock2Tex = atlas.findRegion('cuc_da', 2);\r\n      seaStarTex = atlas.findRegion('sao_bien', -1);\r\n      const bird = atlas.findRegions('chim');\r\n      const octopus = atlas.findRegions('bachtuoc');\r\n      const crab = atlas.findRegions('cua');\r\n      birdAnimation = createAnimation(0.15, bird);\r\n      octopusAnimation = createAnimation(0.15, octopus);\r\n      crabAnimation = createAnimation(0.15, crab);\r\n\r\n      BIRD_WIDTH = width / 5;\r\n      BIRD_HEIGHT = (bird[0].height * BIRD_WIDTH) / bird[0].width;\r\n      ROCK1_HEIGHT = height / 3;\r\n      ROCK1_WIDTH = (ROCK1_HEIGHT * rock1Tex.width) / rock1Tex.height;\r\n      ROCK2_HEIGHT = height / 3;\r\n      ROCK2_WIDTH = (ROCK2_HEIGHT * rock2Tex.width) / rock2Tex.height;\r\n      OCTOPUS_HEIGHT = height / 6;\r\n      OCTOPUS_WIDTH = (octopus[0].width * OCTOPUS_HEIGHT) / octopus[0].height;\r\n      CRAB_HEIGHT = height / 11;\r\n      CRAB_WIDTH = (crab[0].width * CRAB_HEIGHT) / crab[0].height;\r\n      STAR_HEIGHT = height / 12;\r\n      STAR_WIDTH = (STAR_HEIGHT * seaStarTex.width) / seaStarTex.height;\r\n    },\r\n    update(\r\n      delta,\r\n      {\r\n        obstacles,\r\n        playerState: { x },\r\n        gap,\r\n        obstacleInfos: { widths, heights }\r\n      },\r\n      { batch, camera, whiteTex, assets, width, height }\r\n    ) {\r\n      camera.setPosition(x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      for (let obstacle of obstacles) {\r\n        const { type, x, y } = obstacle;\r\n        // fillRect(batch, whiteTex, x, y, widths[type], heights[type]);\r\n        if (type === 0) {\r\n          obstacle.stateTime += delta;\r\n          birdAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x + widths[type] / 2 - BIRD_WIDTH / 2,\r\n              y + heights[type] / 2 - BIRD_HEIGHT / 2,\r\n              BIRD_WIDTH,\r\n              BIRD_HEIGHT\r\n            );\r\n        }\r\n        if (type === 1) {\r\n          obstacle.stateTime += delta;\r\n          rock1Tex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - ROCK1_WIDTH / 2 - width / 16,\r\n            y + heights[type] - ROCK1_HEIGHT + height / 80,\r\n            ROCK1_WIDTH,\r\n            ROCK1_HEIGHT\r\n          );\r\n          crabAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x - CRAB_WIDTH / 2 + width / 20,\r\n              y - CRAB_HEIGHT / 2 + height / 20,\r\n              CRAB_WIDTH,\r\n              CRAB_HEIGHT\r\n            );\r\n          seaStarTex.draw(\r\n            batch,\r\n            x + ROCK1_WIDTH / 5,\r\n            y + ROCK1_HEIGHT / 2.7,\r\n            STAR_WIDTH,\r\n            STAR_HEIGHT\r\n          );\r\n        }\r\n        if (type === 2) {\r\n          obstacle.stateTime += delta;\r\n          rock2Tex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - ROCK2_WIDTH / 2 + width / 16,\r\n            y + heights[type] - ROCK2_HEIGHT + height / 60,\r\n            ROCK2_WIDTH,\r\n            ROCK2_HEIGHT\r\n          );\r\n          octopusAnimation\r\n            .getKeyFrame(obstacle.stateTime, PlayMode.LOOP_PINGPONG)\r\n            .draw(\r\n              batch,\r\n              x - OCTOPUS_WIDTH / 2 + width / 20,\r\n              y - OCTOPUS_WIDTH / 2,\r\n              OCTOPUS_WIDTH,\r\n              OCTOPUS_HEIGHT\r\n            );\r\n        }\r\n        if (type === 3) {\r\n          seaStarTex.draw(\r\n            batch,\r\n            x + widths[type] / 2 - STAR_WIDTH / 2,\r\n            y + heights[type] / 2 - STAR_HEIGHT / 2,\r\n            STAR_WIDTH,\r\n            STAR_HEIGHT\r\n          );\r\n        }\r\n      }\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","export const createRewardSpawnSystem = () => {\r\n  const generateRewards = (\r\n    rewards,\r\n    startX,\r\n    endX,\r\n    height,\r\n    width,\r\n    rewardInfos,\r\n    worldState\r\n  ) => {\r\n    if (Math.random() > 0.6) {\r\n      rewards.push({\r\n        x: endX,\r\n        y: height / 4,\r\n        width: rewardInfos.width, // hit box size\r\n        height: rewardInfos.width, // hit box size\r\n        hit: false,\r\n        type: Math.floor(Math.random() * 3),\r\n        popUpScreen: false,\r\n        canReward: Math.random() > 0.95 ? true : false\r\n      });\r\n    } else {\r\n      if (Math.random() > 0.9) {\r\n        rewards.push({\r\n          x: endX,\r\n          y: (height * 6.6) / 8,\r\n          width: rewardInfos.width, // hit box size\r\n          height: rewardInfos.width, // hit box size\r\n          hit: false,\r\n          type: Math.floor(Math.random() * 3),\r\n          popUpScreen: false,\r\n          canReward: Math.random() > 0.95 ? true : false\r\n        });\r\n      }\r\n    }\r\n  };\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      let {\r\n        playerState: { x },\r\n        rewards,\r\n        lastRewardX,\r\n        rewardInfos\r\n      } = worldState;\r\n\r\n      while (lastRewardX - x < width * 2) {\r\n        generateRewards(\r\n          rewards,\r\n          lastRewardX + width * 2,\r\n          lastRewardX + width * 4,\r\n          height,\r\n          width,\r\n          rewardInfos,\r\n          worldState\r\n        );\r\n        lastRewardX = worldState.lastRewardX = lastRewardX + width * 2;\r\n      }\r\n      // for (let i = rewards.length - 1; i >= 0; i--) {\r\n      //   if (rewards[i].x + worldState.obstacleInfos.width < x - gap) {\r\n      //     rewards.splice(i, 1);\r\n      //   }\r\n      // }\r\n    }\r\n  };\r\n};\r\n","// import { fillRect } from 'gdxjs';\r\nimport { createAnimation } from 'gdxjs';\r\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\r\n// import {}\r\n\r\nexport const createPlayerRenderSystem = () => {\r\n  let PLAYER_WIDTH = 0;\r\n  let PLAYER_HEIGHT = 0;\r\n  let BUBBLE_WIDTH = 0;\r\n  let BUBBLE_HEIGHT = 0;\r\n  let PLAYER_JUMP_HEIGHT = 0;\r\n  let asset;\r\n  let atlas;\r\n  let playerAnimation;\r\n  let bubbleAnimation;\r\n  let charJump;\r\n  return {\r\n    init({ gender, playerState }, { assets, width, height }) {\r\n      atlas = assets.psAtlas;\r\n      if (gender === 0) {\r\n        asset = atlas.findRegions('male');\r\n        charJump = atlas.findRegion('male_jump', -1);\r\n      } else {\r\n        asset = atlas.findRegions('female');\r\n        charJump = atlas.findRegion('female_jump', -1);\r\n      }\r\n      const bubble = atlas.findRegions('bubble');\r\n\r\n      bubbleAnimation = createAnimation(0.2, bubble);\r\n      playerAnimation = createAnimation(0.3, asset);\r\n      PLAYER_WIDTH = width / 3.2;\r\n      PLAYER_HEIGHT = (asset[0].height * PLAYER_WIDTH) / asset[0].width;\r\n      PLAYER_JUMP_HEIGHT = (charJump.height * PLAYER_WIDTH) / charJump.width;\r\n\r\n      BUBBLE_WIDTH = width / 6;\r\n      BUBBLE_HEIGHT = (bubble[0].height * BUBBLE_WIDTH) / bubble[0].width;\r\n    },\r\n    update(delta, { playerState, gap }, { batch, camera, whiteTex, width }) {\r\n      camera.setPosition(playerState.x - gap, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      // fillRect(\r\n      //   batch,\r\n      //   whiteTex,\r\n      //   playerState.x,\r\n      //   playerState.y,\r\n      //   playerState.width,\r\n      //   playerState.height\r\n      // );\r\n      playerState.stateTime += delta;\r\n      if (playerState.jumping) {\r\n        charJump.draw(\r\n          batch,\r\n          playerState.x + playerState.width / 2 - PLAYER_WIDTH / 2,\r\n          playerState.y + playerState.height / 2 - PLAYER_JUMP_HEIGHT / 2,\r\n          PLAYER_WIDTH,\r\n          PLAYER_JUMP_HEIGHT\r\n        );\r\n      } else {\r\n        playerAnimation\r\n          .getKeyFrame(playerState.stateTime, PlayMode.LOOP_PINGPONG)\r\n          .draw(\r\n            batch,\r\n            playerState.x + playerState.width / 2 - PLAYER_WIDTH / 2,\r\n            playerState.y + playerState.height / 2 - PLAYER_HEIGHT / 2,\r\n            PLAYER_WIDTH,\r\n            PLAYER_HEIGHT\r\n          );\r\n      }\r\n      bubbleAnimation\r\n        .getKeyFrame(playerState.stateTime, PlayMode.LOOP_PINGPONG)\r\n        .draw(\r\n          batch,\r\n          playerState.x - PLAYER_WIDTH / 2,\r\n          playerState.y + playerState.height,\r\n          BUBBLE_WIDTH,\r\n          BUBBLE_HEIGHT,\r\n          BUBBLE_WIDTH / 2,\r\n          BUBBLE_HEIGHT / 2,\r\n          0,\r\n          1,\r\n          1\r\n        );\r\n      batch.end();\r\n    }\r\n  };\r\n};\r\n","import createScreen from './utils/createScreen';\r\nimport { InputHandler } from 'gdxjs';\r\nimport { checkPointInsideRect } from './utils/coordUtil';\r\n// import createWhiteTexture from 'gl-white-texture';\r\nimport createRenderPlayScreen from './GameScreen';\r\n\r\nexport const createRenderChoosingScreen = Game => {\r\n  const goToPlayScreen = async () =>\r\n    Game.setCurrentScreen(await createRenderPlayScreen(Game));\r\n\r\n  const { width, height, assets, canvas, pixelRatio, batch, camera } = Game;\r\n\r\n  const inputHandler = new InputHandler(canvas);\r\n  // const whiteTex = createWhiteTexture(gl);\r\n  const atlas = assets.csAtlas;\r\n\r\n  const bg = atlas.findRegion('bg', -1);\r\n\r\n  const BG_HEIGHT = height;\r\n  const BG_WIDTH = (BG_HEIGHT * bg.width) / bg.height;\r\n\r\n  const button = atlas.findRegion('btn_play', -1);\r\n  const BUTTON_WIDTH = width / 4;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * button.height) / button.width;\r\n\r\n  const choiceChar = atlas.findRegion('select_character', -1);\r\n  const TITLE_WIDTH = (width * 2.81) / 4;\r\n  const TITLE_HEIGHT = (TITLE_WIDTH * choiceChar.height) / choiceChar.width;\r\n\r\n  const female_inactive = atlas.findRegion('fmale__inactive', -1);\r\n  const FI_HEIGHT = height / 3.6;\r\n  const FI_WIDTH = (FI_HEIGHT * female_inactive.width) / female_inactive.height;\r\n\r\n  const female = atlas.findRegion('fmale', -1);\r\n  const F_HEIGHT = height / 2.8;\r\n  const F_WIDTH = (F_HEIGHT * female.width) / female.height;\r\n\r\n  const male_inactive = atlas.findRegion('male_inactive', -1);\r\n  const MI_HEIGHT = height / 3.6;\r\n  const MI_WIDTH = (MI_HEIGHT * male_inactive.width) / male_inactive.height;\r\n\r\n  const male = atlas.findRegion('male', -1);\r\n  const M_HEIGHT = height / 2.8;\r\n  const M_WIDTH = (M_HEIGHT * male.width) / male.height;\r\n\r\n  const MALE_RECT = [\r\n    width / 1.9 + width / 20,\r\n    (height * 4.8) / 6 - MI_HEIGHT,\r\n    MI_WIDTH,\r\n    MI_HEIGHT\r\n  ];\r\n\r\n  const FEMALE_RECT = [\r\n    width / 1.9 - FI_WIDTH - width / 20,\r\n    (height * 4.8) / 6 - MI_HEIGHT,\r\n    FI_WIDTH,\r\n    FI_HEIGHT\r\n  ];\r\n\r\n  const BUTTON_RECT = [\r\n    width / 2 - BUTTON_WIDTH / 2,\r\n    (height * 6.2) / 7,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT\r\n  ];\r\n\r\n  let femaleActive = true;\r\n  let point;\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    point = { x: x, y: y };\r\n    if (checkPointInsideRect(point, MALE_RECT, pixelRatio)) {\r\n      femaleActive = false;\r\n      Game.gender = 0;\r\n    }\r\n    if (checkPointInsideRect(point, FEMALE_RECT, pixelRatio)) {\r\n      femaleActive = true;\r\n      Game.gender = 1;\r\n    }\r\n  });\r\n\r\n  inputHandler.addEventListener('touchStart', (x, y) => {\r\n    if (checkPointInsideRect(point, BUTTON_RECT, pixelRatio)) {\r\n      goToPlayScreen();\r\n    }\r\n  });\r\n\r\n  return createScreen({\r\n    update(delta) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      // background\r\n      bg.draw(\r\n        batch,\r\n        width / 2 - BG_WIDTH / 2,\r\n        height / 2 - BG_HEIGHT / 2,\r\n        BG_WIDTH,\r\n        BG_HEIGHT\r\n      );\r\n      // play button\r\n      button.draw(\r\n        batch,\r\n        width / 2 - BUTTON_WIDTH / 2,\r\n        (height * 6.2) / 7,\r\n        BUTTON_WIDTH,\r\n        BUTTON_HEIGHT\r\n      );\r\n      // choice char\r\n      choiceChar.draw(\r\n        batch,\r\n        width / 2 - TITLE_WIDTH / 2,\r\n        (height * 5.75) / 7,\r\n        TITLE_WIDTH,\r\n        TITLE_HEIGHT\r\n      );\r\n      // draw char\r\n      if (femaleActive) {\r\n        female.draw(\r\n          batch,\r\n          width / 1.9 - F_WIDTH,\r\n          (height * 4.8) / 6 - F_HEIGHT,\r\n          F_WIDTH,\r\n          F_HEIGHT\r\n        );\r\n        male_inactive.draw(\r\n          batch,\r\n          width / 1.9 + width / 20,\r\n          (height * 4.8) / 6 - MI_HEIGHT,\r\n          MI_WIDTH,\r\n          MI_HEIGHT\r\n        );\r\n      } else {\r\n        male.draw(\r\n          batch,\r\n          width / 1.9,\r\n          (height * 4.8) / 6 - M_HEIGHT,\r\n          M_WIDTH,\r\n          M_HEIGHT\r\n        );\r\n        female_inactive.draw(\r\n          batch,\r\n          width / 1.9 - FI_WIDTH - width / 20,\r\n          (height * 4.8) / 6 - MI_HEIGHT,\r\n          FI_WIDTH,\r\n          FI_HEIGHT\r\n        );\r\n      }\r\n      batch.end();\r\n    },\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    }\r\n  });\r\n};\r\n","import './index.css';\nimport {\n  resizeCanvas,\n  createGameLoop,\n  createBatch,\n  createOrthoCamera,\n  loadTexture,\n  loadAtlas\n} from 'gdxjs';\nimport createWhiteTex from 'gl-white-texture';\nimport { createRenderChoosingScreen } from './StartScreen';\n\nconst init = async () => {\n  const canvas = document.getElementById('main');\n  const pixelRatio = window.devicePixelRatio || 1;\n  const [width, height] = resizeCanvas(canvas, pixelRatio);\n  const gl = canvas.getContext('webgl');\n  // const info = document.getElementById('info');\n\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n  const whiteTex = createWhiteTex(gl);\n\n  const choosingScreenAtlas = await loadAtlas(gl, './assets/surf.atlas');\n  const playScreenAtlas = await loadAtlas(gl, './assets/asset_wave.atlas');\n  const waveAtlas = await loadAtlas(gl, './assets/wave.atlas');\n  const gameOver = await loadAtlas(gl, './assets/end_surfing.atlas');\n  const score = await loadAtlas(gl, './assets/score.atlas');\n  const moqua = await loadAtlas(gl, './assets/moqua.atlas');\n  const rewardAtlas = await loadAtlas(gl, './assets/reward.atlas');\n  const rewardBoard = await loadTexture(gl, './rewardBoard.png');\n\n  let assets = {\n    csAtlas: choosingScreenAtlas,\n    psAtlas: playScreenAtlas,\n    waveAtlas: waveAtlas,\n    goAtlas: gameOver,\n    score: score,\n    moqua: moqua,\n    reward: rewardAtlas,\n    rewardBoard: rewardBoard\n  };\n\n  const Game = {\n    gender: 1,\n    width,\n    height,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    pixelRatio: pixelRatio,\n    assets,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    }\n  };\n\n  Game.setCurrentScreen(await createRenderChoosingScreen(Game));\n\n  gl.clearColor(1, 0.388, 0.012, 1);\n  // gl.clearColor(0, 0, 0, 1);\n  // gl.clearColor(1, 0, 0, 1);\n  const update = delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  createGameLoop(update);\n  // setInterval(() => (info.innerHTML = `FPS: ${loop.getFps()}`), 500);\n};\n\ninit();\n"],"sourceRoot":""}